use responses::listing::ListingData;
use responses::BasicThing;

use serde_json::Value;

pub type MessageListing = BasicThing<ListingData<Message>>;

#[derive(Debug)]
pub struct Message {
    pub author: Option<String>,
    pub body: String,
    pub body_html: String,
    pub context: String,
    pub first_message_name: Option<String>,
    pub likes: Option<bool>,
    pub name: String,
    pub link_title: Option<String>,
    pub parent_id: Option<String>,
    pub replies: Value,
    pub subject: String,
    pub subreddit: Option<String>,
    pub was_comment: bool,
    pub created: i64,
    pub created_utc: i64,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_Message: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for Message {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<Message, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __ignore,
                    }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        2usize => { Ok(__Field::__field2) }
                                        3usize => { Ok(__Field::__field3) }
                                        4usize => { Ok(__Field::__field4) }
                                        5usize => { Ok(__Field::__field5) }
                                        6usize => { Ok(__Field::__field6) }
                                        7usize => { Ok(__Field::__field7) }
                                        8usize => { Ok(__Field::__field8) }
                                        9usize => { Ok(__Field::__field9) }
                                        10usize => { Ok(__Field::__field10) }
                                        11usize => { Ok(__Field::__field11) }
                                        12usize => { Ok(__Field::__field12) }
                                        13usize => { Ok(__Field::__field13) }
                                        14usize => { Ok(__Field::__field14) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "author" => { Ok(__Field::__field0) }
                                        "body" => { Ok(__Field::__field1) }
                                        "body_html" => {
                                            Ok(__Field::__field2)
                                        }
                                        "context" => { Ok(__Field::__field3) }
                                        "first_message_name" => {
                                            Ok(__Field::__field4)
                                        }
                                        "likes" => { Ok(__Field::__field5) }
                                        "name" => { Ok(__Field::__field6) }
                                        "link_title" => {
                                            Ok(__Field::__field7)
                                        }
                                        "parent_id" => {
                                            Ok(__Field::__field8)
                                        }
                                        "replies" => { Ok(__Field::__field9) }
                                        "subject" => {
                                            Ok(__Field::__field10)
                                        }
                                        "subreddit" => {
                                            Ok(__Field::__field11)
                                        }
                                        "was_comment" => {
                                            Ok(__Field::__field12)
                                        }
                                        "created" => {
                                            Ok(__Field::__field13)
                                        }
                                        "created_utc" => {
                                            Ok(__Field::__field14)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"author" => { Ok(__Field::__field0) }
                                        b"body" => { Ok(__Field::__field1) }
                                        b"body_html" => {
                                            Ok(__Field::__field2)
                                        }
                                        b"context" => {
                                            Ok(__Field::__field3)
                                        }
                                        b"first_message_name" => {
                                            Ok(__Field::__field4)
                                        }
                                        b"likes" => { Ok(__Field::__field5) }
                                        b"name" => { Ok(__Field::__field6) }
                                        b"link_title" => {
                                            Ok(__Field::__field7)
                                        }
                                        b"parent_id" => {
                                            Ok(__Field::__field8)
                                        }
                                        b"replies" => {
                                            Ok(__Field::__field9)
                                        }
                                        b"subject" => {
                                            Ok(__Field::__field10)
                                        }
                                        b"subreddit" => {
                                            Ok(__Field::__field11)
                                        }
                                        b"was_comment" => {
                                            Ok(__Field::__field12)
                                        }
                                        b"created" => {
                                            Ok(__Field::__field13)
                                        }
                                        b"created_utc" => {
                                            Ok(__Field::__field14)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        Message;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<Message, __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                let __field2 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(2usize));
                                        }
                                    };
                                let __field3 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(3usize));
                                        }
                                    };
                                let __field4 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(4usize));
                                        }
                                    };
                                let __field5 =
                                    match try!(visitor . visit :: <
                                               Option<bool> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(5usize));
                                        }
                                    };
                                let __field6 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(6usize));
                                        }
                                    };
                                let __field7 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(7usize));
                                        }
                                    };
                                let __field8 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(8usize));
                                        }
                                    };
                                let __field9 =
                                    match try!(visitor . visit :: < Value > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(9usize));
                                        }
                                    };
                                let __field10 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(10usize));
                                        }
                                    };
                                let __field11 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(11usize));
                                        }
                                    };
                                let __field12 =
                                    match try!(visitor . visit :: < bool > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(12usize));
                                        }
                                    };
                                let __field13 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(13usize));
                                        }
                                    };
                                let __field14 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(14usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(Message{author: __field0,
                                           body: __field1,
                                           body_html: __field2,
                                           context: __field3,
                                           first_message_name: __field4,
                                           likes: __field5,
                                           name: __field6,
                                           link_title: __field7,
                                           parent_id: __field8,
                                           replies: __field9,
                                           subject: __field10,
                                           subreddit: __field11,
                                           was_comment: __field12,
                                           created: __field13,
                                           created_utc: __field14,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<Message, __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<Option<String>> =
                                    None;
                                let mut __field1: Option<String> = None;
                                let mut __field2: Option<String> = None;
                                let mut __field3: Option<String> = None;
                                let mut __field4: Option<Option<String>> =
                                    None;
                                let mut __field5: Option<Option<bool>> = None;
                                let mut __field6: Option<String> = None;
                                let mut __field7: Option<Option<String>> =
                                    None;
                                let mut __field8: Option<Option<String>> =
                                    None;
                                let mut __field9: Option<Value> = None;
                                let mut __field10: Option<String> = None;
                                let mut __field11: Option<Option<String>> =
                                    None;
                                let mut __field12: Option<bool> = None;
                                let mut __field13: Option<i64> = None;
                                let mut __field14: Option<i64> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("author"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("body"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field2 => {
                                            if __field2.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("body_html"));
                                            }
                                            __field2 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field3 => {
                                            if __field3.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("context"));
                                            }
                                            __field3 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field4 => {
                                            if __field4.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("first_message_name"));
                                            }
                                            __field4 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field5 => {
                                            if __field5.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("likes"));
                                            }
                                            __field5 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<bool> > (
                                                          )));
                                        }
                                        __Field::__field6 => {
                                            if __field6.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("name"));
                                            }
                                            __field6 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field7 => {
                                            if __field7.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("link_title"));
                                            }
                                            __field7 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field8 => {
                                            if __field8.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("parent_id"));
                                            }
                                            __field8 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field9 => {
                                            if __field9.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("replies"));
                                            }
                                            __field9 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Value > (  )));
                                        }
                                        __Field::__field10 => {
                                            if __field10.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("subject"));
                                            }
                                            __field10 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field11 => {
                                            if __field11.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("subreddit"));
                                            }
                                            __field11 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field12 => {
                                            if __field12.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("was_comment"));
                                            }
                                            __field12 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          bool > (  )));
                                        }
                                        __Field::__field13 => {
                                            if __field13.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("created"));
                                            }
                                            __field13 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        __Field::__field14 => {
                                            if __field14.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("created_utc"));
                                            }
                                            __field14 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "author" )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field ( "body"
                                             )),
                                    };
                                let __field2 =
                                    match __field2 {
                                        Some(__field2) => __field2,
                                        None =>
                                        try!(visitor . missing_field (
                                             "body_html" )),
                                    };
                                let __field3 =
                                    match __field3 {
                                        Some(__field3) => __field3,
                                        None =>
                                        try!(visitor . missing_field (
                                             "context" )),
                                    };
                                let __field4 =
                                    match __field4 {
                                        Some(__field4) => __field4,
                                        None =>
                                        try!(visitor . missing_field (
                                             "first_message_name" )),
                                    };
                                let __field5 =
                                    match __field5 {
                                        Some(__field5) => __field5,
                                        None =>
                                        try!(visitor . missing_field ( "likes"
                                             )),
                                    };
                                let __field6 =
                                    match __field6 {
                                        Some(__field6) => __field6,
                                        None =>
                                        try!(visitor . missing_field ( "name"
                                             )),
                                    };
                                let __field7 =
                                    match __field7 {
                                        Some(__field7) => __field7,
                                        None =>
                                        try!(visitor . missing_field (
                                             "link_title" )),
                                    };
                                let __field8 =
                                    match __field8 {
                                        Some(__field8) => __field8,
                                        None =>
                                        try!(visitor . missing_field (
                                             "parent_id" )),
                                    };
                                let __field9 =
                                    match __field9 {
                                        Some(__field9) => __field9,
                                        None =>
                                        try!(visitor . missing_field (
                                             "replies" )),
                                    };
                                let __field10 =
                                    match __field10 {
                                        Some(__field10) => __field10,
                                        None =>
                                        try!(visitor . missing_field (
                                             "subject" )),
                                    };
                                let __field11 =
                                    match __field11 {
                                        Some(__field11) => __field11,
                                        None =>
                                        try!(visitor . missing_field (
                                             "subreddit" )),
                                    };
                                let __field12 =
                                    match __field12 {
                                        Some(__field12) => __field12,
                                        None =>
                                        try!(visitor . missing_field (
                                             "was_comment" )),
                                    };
                                let __field13 =
                                    match __field13 {
                                        Some(__field13) => __field13,
                                        None =>
                                        try!(visitor . missing_field (
                                             "created" )),
                                    };
                                let __field14 =
                                    match __field14 {
                                        Some(__field14) => __field14,
                                        None =>
                                        try!(visitor . missing_field (
                                             "created_utc" )),
                                    };
                                Ok(Message{author: __field0,
                                           body: __field1,
                                           body_html: __field2,
                                           context: __field3,
                                           first_message_name: __field4,
                                           likes: __field5,
                                           name: __field6,
                                           link_title: __field7,
                                           parent_id: __field8,
                                           replies: __field9,
                                           subject: __field10,
                                           subreddit: __field11,
                                           was_comment: __field12,
                                           created: __field13,
                                           created_utc: __field14,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["author", "body", "body_html", "context",
                          "first_message_name", "likes", "name", "link_title",
                          "parent_id", "replies", "subject", "subreddit",
                          "was_comment", "created", "created_utc"];
                    deserializer.deserialize_struct("Message", FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
