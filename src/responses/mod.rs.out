pub mod listing {






    use serde_json::Value;
    use responses::BasicThing;
    use responses::comment::CommentListing;
    /// The 'listing' format returned by the Reddit API for post lists.
    pub type Listing = BasicThing<ListingData<Submission>>;
    /// The structure returned by the Reddit API for comments, consisting of the original post
    /// and a listing of the comments.
    pub type CommentResponse = (Listing, CommentListing);
    /// API response from /r/subreddit/about
    pub type SubredditAbout = BasicThing<SubredditAboutData>;
    #[derive(Debug)]
    pub struct SubredditAboutData {
        pub subscribers: u64,
        pub accounts_active: u64,
        pub subreddit_type: String,
        pub title: String,
        pub url: String,
        pub wiki_enabled: bool,
        pub over18: bool,
        pub public_description: String,
        pub public_description_html: String,
        pub public_traffic: bool,
        pub name: String,
        pub id: String,
        pub display_name: String,
        pub description: String,
        pub description_html: String,
        pub created: i64,
        pub created_utc: i64,
        pub quarantine: bool,
        pub submission_type: String,
        pub lang: String,
        pub submit_text: String,
        pub submit_text_html: String,
        pub submit_text_label: Option<String>,
        pub submit_link_label: Option<String>,
        pub comment_score_hide_mins: u64,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_SubredditAboutData: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for SubredditAboutData {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<SubredditAboutData, __D::Error>
                 where __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __field4,
                            __field5,
                            __field6,
                            __field7,
                            __field8,
                            __field9,
                            __field10,
                            __field11,
                            __field12,
                            __field13,
                            __field14,
                            __field15,
                            __field16,
                            __field17,
                            __field18,
                            __field19,
                            __field20,
                            __field21,
                            __field22,
                            __field23,
                            __field24,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            4usize => {
                                                Ok(__Field::__field4)
                                            }
                                            5usize => {
                                                Ok(__Field::__field5)
                                            }
                                            6usize => {
                                                Ok(__Field::__field6)
                                            }
                                            7usize => {
                                                Ok(__Field::__field7)
                                            }
                                            8usize => {
                                                Ok(__Field::__field8)
                                            }
                                            9usize => {
                                                Ok(__Field::__field9)
                                            }
                                            10usize => {
                                                Ok(__Field::__field10)
                                            }
                                            11usize => {
                                                Ok(__Field::__field11)
                                            }
                                            12usize => {
                                                Ok(__Field::__field12)
                                            }
                                            13usize => {
                                                Ok(__Field::__field13)
                                            }
                                            14usize => {
                                                Ok(__Field::__field14)
                                            }
                                            15usize => {
                                                Ok(__Field::__field15)
                                            }
                                            16usize => {
                                                Ok(__Field::__field16)
                                            }
                                            17usize => {
                                                Ok(__Field::__field17)
                                            }
                                            18usize => {
                                                Ok(__Field::__field18)
                                            }
                                            19usize => {
                                                Ok(__Field::__field19)
                                            }
                                            20usize => {
                                                Ok(__Field::__field20)
                                            }
                                            21usize => {
                                                Ok(__Field::__field21)
                                            }
                                            22usize => {
                                                Ok(__Field::__field22)
                                            }
                                            23usize => {
                                                Ok(__Field::__field23)
                                            }
                                            24usize => {
                                                Ok(__Field::__field24)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "subscribers" => {
                                                Ok(__Field::__field0)
                                            }
                                            "accounts_active" => {
                                                Ok(__Field::__field1)
                                            }
                                            "subreddit_type" => {
                                                Ok(__Field::__field2)
                                            }
                                            "title" => {
                                                Ok(__Field::__field3)
                                            }
                                            "url" => { Ok(__Field::__field4) }
                                            "wiki_enabled" => {
                                                Ok(__Field::__field5)
                                            }
                                            "over18" => {
                                                Ok(__Field::__field6)
                                            }
                                            "public_description" => {
                                                Ok(__Field::__field7)
                                            }
                                            "public_description_html" => {
                                                Ok(__Field::__field8)
                                            }
                                            "public_traffic" => {
                                                Ok(__Field::__field9)
                                            }
                                            "name" => {
                                                Ok(__Field::__field10)
                                            }
                                            "id" => { Ok(__Field::__field11) }
                                            "display_name" => {
                                                Ok(__Field::__field12)
                                            }
                                            "description" => {
                                                Ok(__Field::__field13)
                                            }
                                            "description_html" => {
                                                Ok(__Field::__field14)
                                            }
                                            "created" => {
                                                Ok(__Field::__field15)
                                            }
                                            "created_utc" => {
                                                Ok(__Field::__field16)
                                            }
                                            "quarantine" => {
                                                Ok(__Field::__field17)
                                            }
                                            "submission_type" => {
                                                Ok(__Field::__field18)
                                            }
                                            "lang" => {
                                                Ok(__Field::__field19)
                                            }
                                            "submit_text" => {
                                                Ok(__Field::__field20)
                                            }
                                            "submit_text_html" => {
                                                Ok(__Field::__field21)
                                            }
                                            "submit_text_label" => {
                                                Ok(__Field::__field22)
                                            }
                                            "submit_link_label" => {
                                                Ok(__Field::__field23)
                                            }
                                            "comment_score_hide_mins" => {
                                                Ok(__Field::__field24)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"subscribers" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"accounts_active" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"subreddit_type" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"title" => {
                                                Ok(__Field::__field3)
                                            }
                                            b"url" => {
                                                Ok(__Field::__field4)
                                            }
                                            b"wiki_enabled" => {
                                                Ok(__Field::__field5)
                                            }
                                            b"over18" => {
                                                Ok(__Field::__field6)
                                            }
                                            b"public_description" => {
                                                Ok(__Field::__field7)
                                            }
                                            b"public_description_html" => {
                                                Ok(__Field::__field8)
                                            }
                                            b"public_traffic" => {
                                                Ok(__Field::__field9)
                                            }
                                            b"name" => {
                                                Ok(__Field::__field10)
                                            }
                                            b"id" => {
                                                Ok(__Field::__field11)
                                            }
                                            b"display_name" => {
                                                Ok(__Field::__field12)
                                            }
                                            b"description" => {
                                                Ok(__Field::__field13)
                                            }
                                            b"description_html" => {
                                                Ok(__Field::__field14)
                                            }
                                            b"created" => {
                                                Ok(__Field::__field15)
                                            }
                                            b"created_utc" => {
                                                Ok(__Field::__field16)
                                            }
                                            b"quarantine" => {
                                                Ok(__Field::__field17)
                                            }
                                            b"submission_type" => {
                                                Ok(__Field::__field18)
                                            }
                                            b"lang" => {
                                                Ok(__Field::__field19)
                                            }
                                            b"submit_text" => {
                                                Ok(__Field::__field20)
                                            }
                                            b"submit_text_html" => {
                                                Ok(__Field::__field21)
                                            }
                                            b"submit_text_label" => {
                                                Ok(__Field::__field22)
                                            }
                                            b"submit_link_label" => {
                                                Ok(__Field::__field23)
                                            }
                                            b"comment_score_hide_mins" => {
                                                Ok(__Field::__field24)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            SubredditAboutData;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<SubredditAboutData,
                                                       __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    let __field4 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(4usize));
                                            }
                                        };
                                    let __field5 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(5usize));
                                            }
                                        };
                                    let __field6 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(6usize));
                                            }
                                        };
                                    let __field7 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(7usize));
                                            }
                                        };
                                    let __field8 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(8usize));
                                            }
                                        };
                                    let __field9 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(9usize));
                                            }
                                        };
                                    let __field10 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(10usize));
                                            }
                                        };
                                    let __field11 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(11usize));
                                            }
                                        };
                                    let __field12 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(12usize));
                                            }
                                        };
                                    let __field13 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(13usize));
                                            }
                                        };
                                    let __field14 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(14usize));
                                            }
                                        };
                                    let __field15 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(15usize));
                                            }
                                        };
                                    let __field16 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(16usize));
                                            }
                                        };
                                    let __field17 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(17usize));
                                            }
                                        };
                                    let __field18 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(18usize));
                                            }
                                        };
                                    let __field19 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(19usize));
                                            }
                                        };
                                    let __field20 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(20usize));
                                            }
                                        };
                                    let __field21 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(21usize));
                                            }
                                        };
                                    let __field22 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(22usize));
                                            }
                                        };
                                    let __field23 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(23usize));
                                            }
                                        };
                                    let __field24 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(24usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(SubredditAboutData{subscribers:
                                                              __field0,
                                                          accounts_active:
                                                              __field1,
                                                          subreddit_type:
                                                              __field2,
                                                          title: __field3,
                                                          url: __field4,
                                                          wiki_enabled:
                                                              __field5,
                                                          over18: __field6,
                                                          public_description:
                                                              __field7,
                                                          public_description_html:
                                                              __field8,
                                                          public_traffic:
                                                              __field9,
                                                          name: __field10,
                                                          id: __field11,
                                                          display_name:
                                                              __field12,
                                                          description:
                                                              __field13,
                                                          description_html:
                                                              __field14,
                                                          created: __field15,
                                                          created_utc:
                                                              __field16,
                                                          quarantine:
                                                              __field17,
                                                          submission_type:
                                                              __field18,
                                                          lang: __field19,
                                                          submit_text:
                                                              __field20,
                                                          submit_text_html:
                                                              __field21,
                                                          submit_text_label:
                                                              __field22,
                                                          submit_link_label:
                                                              __field23,
                                                          comment_score_hide_mins:
                                                              __field24,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<SubredditAboutData,
                                                       __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<u64> = None;
                                    let mut __field1: Option<u64> = None;
                                    let mut __field2: Option<String> = None;
                                    let mut __field3: Option<String> = None;
                                    let mut __field4: Option<String> = None;
                                    let mut __field5: Option<bool> = None;
                                    let mut __field6: Option<bool> = None;
                                    let mut __field7: Option<String> = None;
                                    let mut __field8: Option<String> = None;
                                    let mut __field9: Option<bool> = None;
                                    let mut __field10: Option<String> = None;
                                    let mut __field11: Option<String> = None;
                                    let mut __field12: Option<String> = None;
                                    let mut __field13: Option<String> = None;
                                    let mut __field14: Option<String> = None;
                                    let mut __field15: Option<i64> = None;
                                    let mut __field16: Option<i64> = None;
                                    let mut __field17: Option<bool> = None;
                                    let mut __field18: Option<String> = None;
                                    let mut __field19: Option<String> = None;
                                    let mut __field20: Option<String> = None;
                                    let mut __field21: Option<String> = None;
                                    let mut __field22:
                                            Option<Option<String>> = None;
                                    let mut __field23:
                                            Option<Option<String>> = None;
                                    let mut __field24: Option<u64> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subscribers"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("accounts_active"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subreddit_type"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("title"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field4 => {
                                                if __field4.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("url"));
                                                }
                                                __field4 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field5 => {
                                                if __field5.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("wiki_enabled"));
                                                }
                                                __field5 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field6 => {
                                                if __field6.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("over18"));
                                                }
                                                __field6 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field7 => {
                                                if __field7.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("public_description"));
                                                }
                                                __field7 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field8 => {
                                                if __field8.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("public_description_html"));
                                                }
                                                __field8 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field9 => {
                                                if __field9.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("public_traffic"));
                                                }
                                                __field9 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field10 => {
                                                if __field10.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("name"));
                                                }
                                                __field10 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field11 => {
                                                if __field11.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("id"));
                                                }
                                                __field11 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field12 => {
                                                if __field12.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("display_name"));
                                                }
                                                __field12 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field13 => {
                                                if __field13.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("description"));
                                                }
                                                __field13 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field14 => {
                                                if __field14.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("description_html"));
                                                }
                                                __field14 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field15 => {
                                                if __field15.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created"));
                                                }
                                                __field15 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field16 => {
                                                if __field16.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created_utc"));
                                                }
                                                __field16 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field17 => {
                                                if __field17.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("quarantine"));
                                                }
                                                __field17 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field18 => {
                                                if __field18.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("submission_type"));
                                                }
                                                __field18 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field19 => {
                                                if __field19.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("lang"));
                                                }
                                                __field19 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field20 => {
                                                if __field20.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("submit_text"));
                                                }
                                                __field20 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field21 => {
                                                if __field21.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("submit_text_html"));
                                                }
                                                __field21 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field22 => {
                                                if __field22.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("submit_text_label"));
                                                }
                                                __field22 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field23 => {
                                                if __field23.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("submit_link_label"));
                                                }
                                                __field23 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field24 => {
                                                if __field24.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("comment_score_hide_mins"));
                                                }
                                                __field24 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subscribers" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "accounts_active" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subreddit_type" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "title" )),
                                        };
                                    let __field4 =
                                        match __field4 {
                                            Some(__field4) => __field4,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "url" )),
                                        };
                                    let __field5 =
                                        match __field5 {
                                            Some(__field5) => __field5,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "wiki_enabled" )),
                                        };
                                    let __field6 =
                                        match __field6 {
                                            Some(__field6) => __field6,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "over18" )),
                                        };
                                    let __field7 =
                                        match __field7 {
                                            Some(__field7) => __field7,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "public_description" )),
                                        };
                                    let __field8 =
                                        match __field8 {
                                            Some(__field8) => __field8,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "public_description_html" )),
                                        };
                                    let __field9 =
                                        match __field9 {
                                            Some(__field9) => __field9,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "public_traffic" )),
                                        };
                                    let __field10 =
                                        match __field10 {
                                            Some(__field10) => __field10,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "name" )),
                                        };
                                    let __field11 =
                                        match __field11 {
                                            Some(__field11) => __field11,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "id" )),
                                        };
                                    let __field12 =
                                        match __field12 {
                                            Some(__field12) => __field12,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "display_name" )),
                                        };
                                    let __field13 =
                                        match __field13 {
                                            Some(__field13) => __field13,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "description" )),
                                        };
                                    let __field14 =
                                        match __field14 {
                                            Some(__field14) => __field14,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "description_html" )),
                                        };
                                    let __field15 =
                                        match __field15 {
                                            Some(__field15) => __field15,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created" )),
                                        };
                                    let __field16 =
                                        match __field16 {
                                            Some(__field16) => __field16,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created_utc" )),
                                        };
                                    let __field17 =
                                        match __field17 {
                                            Some(__field17) => __field17,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "quarantine" )),
                                        };
                                    let __field18 =
                                        match __field18 {
                                            Some(__field18) => __field18,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "submission_type" )),
                                        };
                                    let __field19 =
                                        match __field19 {
                                            Some(__field19) => __field19,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "lang" )),
                                        };
                                    let __field20 =
                                        match __field20 {
                                            Some(__field20) => __field20,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "submit_text" )),
                                        };
                                    let __field21 =
                                        match __field21 {
                                            Some(__field21) => __field21,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "submit_text_html" )),
                                        };
                                    let __field22 =
                                        match __field22 {
                                            Some(__field22) => __field22,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "submit_text_label" )),
                                        };
                                    let __field23 =
                                        match __field23 {
                                            Some(__field23) => __field23,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "submit_link_label" )),
                                        };
                                    let __field24 =
                                        match __field24 {
                                            Some(__field24) => __field24,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "comment_score_hide_mins" )),
                                        };
                                    Ok(SubredditAboutData{subscribers:
                                                              __field0,
                                                          accounts_active:
                                                              __field1,
                                                          subreddit_type:
                                                              __field2,
                                                          title: __field3,
                                                          url: __field4,
                                                          wiki_enabled:
                                                              __field5,
                                                          over18: __field6,
                                                          public_description:
                                                              __field7,
                                                          public_description_html:
                                                              __field8,
                                                          public_traffic:
                                                              __field9,
                                                          name: __field10,
                                                          id: __field11,
                                                          display_name:
                                                              __field12,
                                                          description:
                                                              __field13,
                                                          description_html:
                                                              __field14,
                                                          created: __field15,
                                                          created_utc:
                                                              __field16,
                                                          quarantine:
                                                              __field17,
                                                          submission_type:
                                                              __field18,
                                                          lang: __field19,
                                                          submit_text:
                                                              __field20,
                                                          submit_text_html:
                                                              __field21,
                                                          submit_text_label:
                                                              __field22,
                                                          submit_link_label:
                                                              __field23,
                                                          comment_score_hide_mins:
                                                              __field24,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["subscribers", "accounts_active",
                              "subreddit_type", "title", "url",
                              "wiki_enabled", "over18", "public_description",
                              "public_description_html", "public_traffic",
                              "name", "id", "display_name", "description",
                              "description_html", "created", "created_utc",
                              "quarantine", "submission_type", "lang",
                              "submit_text", "submit_text_html",
                              "submit_text_label", "submit_link_label",
                              "comment_score_hide_mins"];
                        deserializer.deserialize_struct("SubredditAboutData",
                                                        FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
    /// The contents of a call to a 'listing' endpoint.
    #[derive(Debug)]
    pub struct ListingData<T> {
        /// A modhash (essentially a CSRF token) generated for this request. This is generally
        /// not required for any use-case, but is provided nevertheless.
        pub modhash: Option<String>,
        pub before: Option<String>,
        pub after: Option<String>,
        pub children: Vec<BasicThing<T>>,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_ListingData: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl <T> _serde::de::Deserialize for ListingData<T> where
             T: _serde::de::Deserialize {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<ListingData<T>, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "modhash" => {
                                                Ok(__Field::__field0)
                                            }
                                            "before" => {
                                                Ok(__Field::__field1)
                                            }
                                            "after" => {
                                                Ok(__Field::__field2)
                                            }
                                            "children" => {
                                                Ok(__Field::__field3)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"modhash" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"before" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"after" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"children" => {
                                                Ok(__Field::__field3)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer,
                                         T>(::std::marker::PhantomData<__D>,
                                            ::std::marker::PhantomData<T>)
                               where T: _serde::de::Deserialize;
                        impl <__D: _serde::de::Deserializer, T>
                         _serde::de::Visitor for __Visitor<__D, T> where
                         T: _serde::de::Deserialize {
                            type
                            Value
                            =
                            ListingData<T>;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<ListingData<T>,
                                                       __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < Vec <
                                                   BasicThing < T >> > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(ListingData{modhash: __field0,
                                                   before: __field1,
                                                   after: __field2,
                                                   children: __field3,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<ListingData<T>,
                                                       __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<Option<String>> =
                                        None;
                                    let mut __field1: Option<Option<String>> =
                                        None;
                                    let mut __field2: Option<Option<String>> =
                                        None;
                                    let mut __field3:
                                            Option<Vec<BasicThing<T>>> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("modhash"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("before"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("after"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("children"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Vec < BasicThing
                                                              < T >> > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "modhash" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "before" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "after" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "children" )),
                                        };
                                    Ok(ListingData{modhash: __field0,
                                                   before: __field1,
                                                   after: __field2,
                                                   children: __field3,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["modhash", "before", "after", "children"];
                        deserializer.deserialize_struct("ListingData", FIELDS,
                                                        __Visitor::<__D,
                                                                    T>(::std::marker::PhantomData,
                                                                       ::std::marker::PhantomData))
                    }
                }
            }
        };
    /// Represents all types of link posts and self posts on Reddit.
    #[derive(Debug)]
    pub struct Submission {
        /// The domain of the link (if link post) or self.subreddit (if self post).
        /// Domains do not include a protocol, e.g. `i.redd.it` or `self.learnprogramming`
        pub domain: String,
        /// Contains the name of the moderator who banned this, if the logged-in user is a moderator
        /// of this subreddit and this is banned.
        pub banned_by: Option<String>,
        /// The subreddit that this submission was posted in (not including `/r/`)
        pub subreddit: String,
        /// If this is a self post, it contains the HTML of the post body. Otherwise, it is `None`.
        pub selftext_html: Option<String>,
        /// The self text in **Markdown** format, if this is a self post. Unlike `selftext_html`, this
        /// is an **empty string** if this is a link post.
        pub selftext: String,
        /// This is `Some(true)` if the logged-in user has upvoted this submission, `Some(false)` if
        /// the user has downvoted this submission or `None` if the user has not voted.
        pub likes: Option<bool>,
        /// If a specifc sort method is suggested, this is set to the string name of it, otherwise
        /// it is `None`.
        /// # Possible values
        /// - top
        /// - new
        /// - controversial
        /// - old
        /// - qa
        /// - confidence
        pub suggested_sort: Option<String>,
        /// If this post is flaired, this set to `Some(FLAIR TEXT)`. Otherwise, it is `None`.
        /// Link flairs **can** be empty strings.
        pub link_flair_text: Option<String>,
        /// The ID of the post in base-36 form, as used in Reddit's links.
        pub id: String,
        /// The amount of times that a user has been gilded (gifted Reddit Gold).
        pub gilded: u64,
        /// This is `true` if Reddit has archived the submission (usually done after 6 months).
        /// Archived submissions cannot be voted or commented upon.
        pub archived: bool,
        /// This is `true` if the logged-in user has already followed this link, otherwise `false`.
        pub clicked: bool,
        /// The name of the author of the submission (not including the leading `/u/`)
        pub author: String,
        /// The overall points score of this post, as shown on the upvote counter. This is the
        /// same as upvotes - downvotes (however, this figure may be fuzzed by Reddit, and may not
        /// be exact)
        pub score: i64,
        /// This contains the name of the user who approved this submission. This is `None` unless
        /// you are a mod of the subreddit **and** a user has approved this post.
        pub approved_by: Option<String>,
        /// This is `true` if the 'nsfw' option has been selected for this submission.
        pub over_18: bool,
        /// This is `true` if the logged-in user has clicked 'hide' on this post.
        pub hidden: bool,
        /// The number of comment replies to this submission.
        pub num_comments: u64,
        /// The URL to the link thumbnail. This is "self" if this is a self post, or "default" if
        /// a thumbnail is not available.
        pub thumbnail: String,
        /// The Reddit ID for the subreddit where this was posted, **including the leading `t5_`**.
        pub subreddit_id: String,
        /// This is `true` if the score is being hidden.
        pub hide_score: bool,
        /// This is `false` if the submission is not edited and is the edit timestamp if it is edited.
        /// Access through the functions of `Submission` instead.
        pub edited: Value,
        /// The CSS class set for the link's flair (if available), otherwise `None`.
        pub link_flair_css_class: Option<String>,
        /// The CSS class set for the author's flair (if available). If there is no flair, this is
        /// `None`.
        pub author_flair_css_class: Option<String>,
        /// The number of downvotes (fuzzed; see `score` for further explanation)
        pub downs: i64,
        /// The number of upvotes (fuzzed; see `score` for further explanation)
        pub ups: i64,
        /// True if the logged-in user has saved this submission.
        pub saved: bool,
        /// The reason for the post removal, if you are a moderator **and** this post has been
        /// removed.
        pub removal_reason: Option<String>,
        /// This is `true` if this submission is stickied (an 'annoucement' thread)
        pub stickied: bool,
        /// This is `true` if this is a self post.
        pub is_self: bool,
        /// The permanent, long link for this submission.
        pub permalink: String,
        /// This is `true` if the submission has been locked by a moderator, and no replies can be
        /// made.
        pub locked: bool,
        /// The full 'Thing ID', consisting of a 'kind' and a base-36 identifier. The valid kinds are:
        /// - t1_ - Comment
        /// - t2_ - Account
        /// - t3_ - Link
        /// - t4_ - Message
        /// - t5_ - Subreddit
        /// - t6_ - Award
        /// - t8_ - PromoCampaign
        pub name: String,
        /// A timestamp of the time when the post was created, in the logged-in user's **local**
        /// time.
        pub created: i64,
        /// The linked URL, if this is a link post.
        pub url: Option<String>,
        /// The text of the author's flair, if present. Can be an empty string if the flair is present
        /// but contains no text.
        pub author_flair_text: Option<String>,
        /// This is `true` if the post is from a quarantined subreddit.
        pub quarantine: bool,
        /// The title of the post.
        pub title: String,
        /// A timestamp of the time when the post was created, in **UTC**.
        pub created_utc: i64,
        /// Indicates whether the user has used a special flag for themselves, e.g. [M] or [A].
        /// Possible values:
        /// - None - Normal user
        /// - Some("moderator") - [M]
        /// - Some("admin") - [A]
        /// - Some("special") - other special 'distinguishes' e.g. [Δ]
        pub distinguished: Option<String>,
        /// This is `true` if the user has visited this link.
        pub visited: bool,
        /// The number of reports, if the user is a moderator of this subreddit.
        pub num_reports: Option<u64>,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_Submission: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for Submission {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<Submission, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __field4,
                            __field5,
                            __field6,
                            __field7,
                            __field8,
                            __field9,
                            __field10,
                            __field11,
                            __field12,
                            __field13,
                            __field14,
                            __field15,
                            __field16,
                            __field17,
                            __field18,
                            __field19,
                            __field20,
                            __field21,
                            __field22,
                            __field23,
                            __field24,
                            __field25,
                            __field26,
                            __field27,
                            __field28,
                            __field29,
                            __field30,
                            __field31,
                            __field32,
                            __field33,
                            __field34,
                            __field35,
                            __field36,
                            __field37,
                            __field38,
                            __field39,
                            __field40,
                            __field41,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            4usize => {
                                                Ok(__Field::__field4)
                                            }
                                            5usize => {
                                                Ok(__Field::__field5)
                                            }
                                            6usize => {
                                                Ok(__Field::__field6)
                                            }
                                            7usize => {
                                                Ok(__Field::__field7)
                                            }
                                            8usize => {
                                                Ok(__Field::__field8)
                                            }
                                            9usize => {
                                                Ok(__Field::__field9)
                                            }
                                            10usize => {
                                                Ok(__Field::__field10)
                                            }
                                            11usize => {
                                                Ok(__Field::__field11)
                                            }
                                            12usize => {
                                                Ok(__Field::__field12)
                                            }
                                            13usize => {
                                                Ok(__Field::__field13)
                                            }
                                            14usize => {
                                                Ok(__Field::__field14)
                                            }
                                            15usize => {
                                                Ok(__Field::__field15)
                                            }
                                            16usize => {
                                                Ok(__Field::__field16)
                                            }
                                            17usize => {
                                                Ok(__Field::__field17)
                                            }
                                            18usize => {
                                                Ok(__Field::__field18)
                                            }
                                            19usize => {
                                                Ok(__Field::__field19)
                                            }
                                            20usize => {
                                                Ok(__Field::__field20)
                                            }
                                            21usize => {
                                                Ok(__Field::__field21)
                                            }
                                            22usize => {
                                                Ok(__Field::__field22)
                                            }
                                            23usize => {
                                                Ok(__Field::__field23)
                                            }
                                            24usize => {
                                                Ok(__Field::__field24)
                                            }
                                            25usize => {
                                                Ok(__Field::__field25)
                                            }
                                            26usize => {
                                                Ok(__Field::__field26)
                                            }
                                            27usize => {
                                                Ok(__Field::__field27)
                                            }
                                            28usize => {
                                                Ok(__Field::__field28)
                                            }
                                            29usize => {
                                                Ok(__Field::__field29)
                                            }
                                            30usize => {
                                                Ok(__Field::__field30)
                                            }
                                            31usize => {
                                                Ok(__Field::__field31)
                                            }
                                            32usize => {
                                                Ok(__Field::__field32)
                                            }
                                            33usize => {
                                                Ok(__Field::__field33)
                                            }
                                            34usize => {
                                                Ok(__Field::__field34)
                                            }
                                            35usize => {
                                                Ok(__Field::__field35)
                                            }
                                            36usize => {
                                                Ok(__Field::__field36)
                                            }
                                            37usize => {
                                                Ok(__Field::__field37)
                                            }
                                            38usize => {
                                                Ok(__Field::__field38)
                                            }
                                            39usize => {
                                                Ok(__Field::__field39)
                                            }
                                            40usize => {
                                                Ok(__Field::__field40)
                                            }
                                            41usize => {
                                                Ok(__Field::__field41)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "domain" => {
                                                Ok(__Field::__field0)
                                            }
                                            "banned_by" => {
                                                Ok(__Field::__field1)
                                            }
                                            "subreddit" => {
                                                Ok(__Field::__field2)
                                            }
                                            "selftext_html" => {
                                                Ok(__Field::__field3)
                                            }
                                            "selftext" => {
                                                Ok(__Field::__field4)
                                            }
                                            "likes" => {
                                                Ok(__Field::__field5)
                                            }
                                            "suggested_sort" => {
                                                Ok(__Field::__field6)
                                            }
                                            "link_flair_text" => {
                                                Ok(__Field::__field7)
                                            }
                                            "id" => { Ok(__Field::__field8) }
                                            "gilded" => {
                                                Ok(__Field::__field9)
                                            }
                                            "archived" => {
                                                Ok(__Field::__field10)
                                            }
                                            "clicked" => {
                                                Ok(__Field::__field11)
                                            }
                                            "author" => {
                                                Ok(__Field::__field12)
                                            }
                                            "score" => {
                                                Ok(__Field::__field13)
                                            }
                                            "approved_by" => {
                                                Ok(__Field::__field14)
                                            }
                                            "over_18" => {
                                                Ok(__Field::__field15)
                                            }
                                            "hidden" => {
                                                Ok(__Field::__field16)
                                            }
                                            "num_comments" => {
                                                Ok(__Field::__field17)
                                            }
                                            "thumbnail" => {
                                                Ok(__Field::__field18)
                                            }
                                            "subreddit_id" => {
                                                Ok(__Field::__field19)
                                            }
                                            "hide_score" => {
                                                Ok(__Field::__field20)
                                            }
                                            "edited" => {
                                                Ok(__Field::__field21)
                                            }
                                            "link_flair_css_class" => {
                                                Ok(__Field::__field22)
                                            }
                                            "author_flair_css_class" => {
                                                Ok(__Field::__field23)
                                            }
                                            "downs" => {
                                                Ok(__Field::__field24)
                                            }
                                            "ups" => {
                                                Ok(__Field::__field25)
                                            }
                                            "saved" => {
                                                Ok(__Field::__field26)
                                            }
                                            "removal_reason" => {
                                                Ok(__Field::__field27)
                                            }
                                            "stickied" => {
                                                Ok(__Field::__field28)
                                            }
                                            "is_self" => {
                                                Ok(__Field::__field29)
                                            }
                                            "permalink" => {
                                                Ok(__Field::__field30)
                                            }
                                            "locked" => {
                                                Ok(__Field::__field31)
                                            }
                                            "name" => {
                                                Ok(__Field::__field32)
                                            }
                                            "created" => {
                                                Ok(__Field::__field33)
                                            }
                                            "url" => {
                                                Ok(__Field::__field34)
                                            }
                                            "author_flair_text" => {
                                                Ok(__Field::__field35)
                                            }
                                            "quarantine" => {
                                                Ok(__Field::__field36)
                                            }
                                            "title" => {
                                                Ok(__Field::__field37)
                                            }
                                            "created_utc" => {
                                                Ok(__Field::__field38)
                                            }
                                            "distinguished" => {
                                                Ok(__Field::__field39)
                                            }
                                            "visited" => {
                                                Ok(__Field::__field40)
                                            }
                                            "num_reports" => {
                                                Ok(__Field::__field41)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"domain" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"banned_by" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"subreddit" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"selftext_html" => {
                                                Ok(__Field::__field3)
                                            }
                                            b"selftext" => {
                                                Ok(__Field::__field4)
                                            }
                                            b"likes" => {
                                                Ok(__Field::__field5)
                                            }
                                            b"suggested_sort" => {
                                                Ok(__Field::__field6)
                                            }
                                            b"link_flair_text" => {
                                                Ok(__Field::__field7)
                                            }
                                            b"id" => { Ok(__Field::__field8) }
                                            b"gilded" => {
                                                Ok(__Field::__field9)
                                            }
                                            b"archived" => {
                                                Ok(__Field::__field10)
                                            }
                                            b"clicked" => {
                                                Ok(__Field::__field11)
                                            }
                                            b"author" => {
                                                Ok(__Field::__field12)
                                            }
                                            b"score" => {
                                                Ok(__Field::__field13)
                                            }
                                            b"approved_by" => {
                                                Ok(__Field::__field14)
                                            }
                                            b"over_18" => {
                                                Ok(__Field::__field15)
                                            }
                                            b"hidden" => {
                                                Ok(__Field::__field16)
                                            }
                                            b"num_comments" => {
                                                Ok(__Field::__field17)
                                            }
                                            b"thumbnail" => {
                                                Ok(__Field::__field18)
                                            }
                                            b"subreddit_id" => {
                                                Ok(__Field::__field19)
                                            }
                                            b"hide_score" => {
                                                Ok(__Field::__field20)
                                            }
                                            b"edited" => {
                                                Ok(__Field::__field21)
                                            }
                                            b"link_flair_css_class" => {
                                                Ok(__Field::__field22)
                                            }
                                            b"author_flair_css_class" => {
                                                Ok(__Field::__field23)
                                            }
                                            b"downs" => {
                                                Ok(__Field::__field24)
                                            }
                                            b"ups" => {
                                                Ok(__Field::__field25)
                                            }
                                            b"saved" => {
                                                Ok(__Field::__field26)
                                            }
                                            b"removal_reason" => {
                                                Ok(__Field::__field27)
                                            }
                                            b"stickied" => {
                                                Ok(__Field::__field28)
                                            }
                                            b"is_self" => {
                                                Ok(__Field::__field29)
                                            }
                                            b"permalink" => {
                                                Ok(__Field::__field30)
                                            }
                                            b"locked" => {
                                                Ok(__Field::__field31)
                                            }
                                            b"name" => {
                                                Ok(__Field::__field32)
                                            }
                                            b"created" => {
                                                Ok(__Field::__field33)
                                            }
                                            b"url" => {
                                                Ok(__Field::__field34)
                                            }
                                            b"author_flair_text" => {
                                                Ok(__Field::__field35)
                                            }
                                            b"quarantine" => {
                                                Ok(__Field::__field36)
                                            }
                                            b"title" => {
                                                Ok(__Field::__field37)
                                            }
                                            b"created_utc" => {
                                                Ok(__Field::__field38)
                                            }
                                            b"distinguished" => {
                                                Ok(__Field::__field39)
                                            }
                                            b"visited" => {
                                                Ok(__Field::__field40)
                                            }
                                            b"num_reports" => {
                                                Ok(__Field::__field41)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            Submission;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<Submission, __V::Error>
                             where __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    let __field4 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(4usize));
                                            }
                                        };
                                    let __field5 =
                                        match try!(visitor . visit :: < Option
                                                   < bool > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(5usize));
                                            }
                                        };
                                    let __field6 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(6usize));
                                            }
                                        };
                                    let __field7 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(7usize));
                                            }
                                        };
                                    let __field8 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(8usize));
                                            }
                                        };
                                    let __field9 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(9usize));
                                            }
                                        };
                                    let __field10 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(10usize));
                                            }
                                        };
                                    let __field11 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(11usize));
                                            }
                                        };
                                    let __field12 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(12usize));
                                            }
                                        };
                                    let __field13 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(13usize));
                                            }
                                        };
                                    let __field14 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(14usize));
                                            }
                                        };
                                    let __field15 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(15usize));
                                            }
                                        };
                                    let __field16 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(16usize));
                                            }
                                        };
                                    let __field17 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(17usize));
                                            }
                                        };
                                    let __field18 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(18usize));
                                            }
                                        };
                                    let __field19 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(19usize));
                                            }
                                        };
                                    let __field20 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(20usize));
                                            }
                                        };
                                    let __field21 =
                                        match try!(visitor . visit :: < Value
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(21usize));
                                            }
                                        };
                                    let __field22 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(22usize));
                                            }
                                        };
                                    let __field23 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(23usize));
                                            }
                                        };
                                    let __field24 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(24usize));
                                            }
                                        };
                                    let __field25 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(25usize));
                                            }
                                        };
                                    let __field26 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(26usize));
                                            }
                                        };
                                    let __field27 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(27usize));
                                            }
                                        };
                                    let __field28 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(28usize));
                                            }
                                        };
                                    let __field29 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(29usize));
                                            }
                                        };
                                    let __field30 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(30usize));
                                            }
                                        };
                                    let __field31 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(31usize));
                                            }
                                        };
                                    let __field32 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(32usize));
                                            }
                                        };
                                    let __field33 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(33usize));
                                            }
                                        };
                                    let __field34 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(34usize));
                                            }
                                        };
                                    let __field35 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(35usize));
                                            }
                                        };
                                    let __field36 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(36usize));
                                            }
                                        };
                                    let __field37 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(37usize));
                                            }
                                        };
                                    let __field38 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(38usize));
                                            }
                                        };
                                    let __field39 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(39usize));
                                            }
                                        };
                                    let __field40 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(40usize));
                                            }
                                        };
                                    let __field41 =
                                        match try!(visitor . visit :: < Option
                                                   < u64 > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(41usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(Submission{domain: __field0,
                                                  banned_by: __field1,
                                                  subreddit: __field2,
                                                  selftext_html: __field3,
                                                  selftext: __field4,
                                                  likes: __field5,
                                                  suggested_sort: __field6,
                                                  link_flair_text: __field7,
                                                  id: __field8,
                                                  gilded: __field9,
                                                  archived: __field10,
                                                  clicked: __field11,
                                                  author: __field12,
                                                  score: __field13,
                                                  approved_by: __field14,
                                                  over_18: __field15,
                                                  hidden: __field16,
                                                  num_comments: __field17,
                                                  thumbnail: __field18,
                                                  subreddit_id: __field19,
                                                  hide_score: __field20,
                                                  edited: __field21,
                                                  link_flair_css_class:
                                                      __field22,
                                                  author_flair_css_class:
                                                      __field23,
                                                  downs: __field24,
                                                  ups: __field25,
                                                  saved: __field26,
                                                  removal_reason: __field27,
                                                  stickied: __field28,
                                                  is_self: __field29,
                                                  permalink: __field30,
                                                  locked: __field31,
                                                  name: __field32,
                                                  created: __field33,
                                                  url: __field34,
                                                  author_flair_text:
                                                      __field35,
                                                  quarantine: __field36,
                                                  title: __field37,
                                                  created_utc: __field38,
                                                  distinguished: __field39,
                                                  visited: __field40,
                                                  num_reports: __field41,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<Submission, __V::Error>
                             where __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<String> = None;
                                    let mut __field1: Option<Option<String>> =
                                        None;
                                    let mut __field2: Option<String> = None;
                                    let mut __field3: Option<Option<String>> =
                                        None;
                                    let mut __field4: Option<String> = None;
                                    let mut __field5: Option<Option<bool>> =
                                        None;
                                    let mut __field6: Option<Option<String>> =
                                        None;
                                    let mut __field7: Option<Option<String>> =
                                        None;
                                    let mut __field8: Option<String> = None;
                                    let mut __field9: Option<u64> = None;
                                    let mut __field10: Option<bool> = None;
                                    let mut __field11: Option<bool> = None;
                                    let mut __field12: Option<String> = None;
                                    let mut __field13: Option<i64> = None;
                                    let mut __field14:
                                            Option<Option<String>> = None;
                                    let mut __field15: Option<bool> = None;
                                    let mut __field16: Option<bool> = None;
                                    let mut __field17: Option<u64> = None;
                                    let mut __field18: Option<String> = None;
                                    let mut __field19: Option<String> = None;
                                    let mut __field20: Option<bool> = None;
                                    let mut __field21: Option<Value> = None;
                                    let mut __field22:
                                            Option<Option<String>> = None;
                                    let mut __field23:
                                            Option<Option<String>> = None;
                                    let mut __field24: Option<i64> = None;
                                    let mut __field25: Option<i64> = None;
                                    let mut __field26: Option<bool> = None;
                                    let mut __field27:
                                            Option<Option<String>> = None;
                                    let mut __field28: Option<bool> = None;
                                    let mut __field29: Option<bool> = None;
                                    let mut __field30: Option<String> = None;
                                    let mut __field31: Option<bool> = None;
                                    let mut __field32: Option<String> = None;
                                    let mut __field33: Option<i64> = None;
                                    let mut __field34:
                                            Option<Option<String>> = None;
                                    let mut __field35:
                                            Option<Option<String>> = None;
                                    let mut __field36: Option<bool> = None;
                                    let mut __field37: Option<String> = None;
                                    let mut __field38: Option<i64> = None;
                                    let mut __field39:
                                            Option<Option<String>> = None;
                                    let mut __field40: Option<bool> = None;
                                    let mut __field41: Option<Option<u64>> =
                                        None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("domain"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("banned_by"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subreddit"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("selftext_html"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field4 => {
                                                if __field4.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("selftext"));
                                                }
                                                __field4 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field5 => {
                                                if __field5.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("likes"));
                                                }
                                                __field5 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < bool >
                                                              > (  )));
                                            }
                                            __Field::__field6 => {
                                                if __field6.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("suggested_sort"));
                                                }
                                                __field6 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field7 => {
                                                if __field7.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("link_flair_text"));
                                                }
                                                __field7 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field8 => {
                                                if __field8.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("id"));
                                                }
                                                __field8 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field9 => {
                                                if __field9.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("gilded"));
                                                }
                                                __field9 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field10 => {
                                                if __field10.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("archived"));
                                                }
                                                __field10 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field11 => {
                                                if __field11.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("clicked"));
                                                }
                                                __field11 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field12 => {
                                                if __field12.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author"));
                                                }
                                                __field12 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field13 => {
                                                if __field13.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("score"));
                                                }
                                                __field13 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field14 => {
                                                if __field14.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("approved_by"));
                                                }
                                                __field14 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field15 => {
                                                if __field15.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("over_18"));
                                                }
                                                __field15 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field16 => {
                                                if __field16.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("hidden"));
                                                }
                                                __field16 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field17 => {
                                                if __field17.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("num_comments"));
                                                }
                                                __field17 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field18 => {
                                                if __field18.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("thumbnail"));
                                                }
                                                __field18 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field19 => {
                                                if __field19.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subreddit_id"));
                                                }
                                                __field19 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field20 => {
                                                if __field20.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("hide_score"));
                                                }
                                                __field20 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field21 => {
                                                if __field21.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("edited"));
                                                }
                                                __field21 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Value > (  )));
                                            }
                                            __Field::__field22 => {
                                                if __field22.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("link_flair_css_class"));
                                                }
                                                __field22 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field23 => {
                                                if __field23.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author_flair_css_class"));
                                                }
                                                __field23 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field24 => {
                                                if __field24.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("downs"));
                                                }
                                                __field24 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field25 => {
                                                if __field25.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("ups"));
                                                }
                                                __field25 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field26 => {
                                                if __field26.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("saved"));
                                                }
                                                __field26 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field27 => {
                                                if __field27.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("removal_reason"));
                                                }
                                                __field27 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field28 => {
                                                if __field28.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("stickied"));
                                                }
                                                __field28 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field29 => {
                                                if __field29.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("is_self"));
                                                }
                                                __field29 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field30 => {
                                                if __field30.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("permalink"));
                                                }
                                                __field30 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field31 => {
                                                if __field31.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("locked"));
                                                }
                                                __field31 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field32 => {
                                                if __field32.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("name"));
                                                }
                                                __field32 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field33 => {
                                                if __field33.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created"));
                                                }
                                                __field33 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field34 => {
                                                if __field34.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("url"));
                                                }
                                                __field34 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field35 => {
                                                if __field35.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author_flair_text"));
                                                }
                                                __field35 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field36 => {
                                                if __field36.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("quarantine"));
                                                }
                                                __field36 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field37 => {
                                                if __field37.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("title"));
                                                }
                                                __field37 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field38 => {
                                                if __field38.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created_utc"));
                                                }
                                                __field38 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field39 => {
                                                if __field39.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("distinguished"));
                                                }
                                                __field39 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field40 => {
                                                if __field40.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("visited"));
                                                }
                                                __field40 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field41 => {
                                                if __field41.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("num_reports"));
                                                }
                                                __field41 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < u64 > >
                                                              (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "domain" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "banned_by" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subreddit" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "selftext_html" )),
                                        };
                                    let __field4 =
                                        match __field4 {
                                            Some(__field4) => __field4,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "selftext" )),
                                        };
                                    let __field5 =
                                        match __field5 {
                                            Some(__field5) => __field5,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "likes" )),
                                        };
                                    let __field6 =
                                        match __field6 {
                                            Some(__field6) => __field6,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "suggested_sort" )),
                                        };
                                    let __field7 =
                                        match __field7 {
                                            Some(__field7) => __field7,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "link_flair_text" )),
                                        };
                                    let __field8 =
                                        match __field8 {
                                            Some(__field8) => __field8,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "id" )),
                                        };
                                    let __field9 =
                                        match __field9 {
                                            Some(__field9) => __field9,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "gilded" )),
                                        };
                                    let __field10 =
                                        match __field10 {
                                            Some(__field10) => __field10,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "archived" )),
                                        };
                                    let __field11 =
                                        match __field11 {
                                            Some(__field11) => __field11,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "clicked" )),
                                        };
                                    let __field12 =
                                        match __field12 {
                                            Some(__field12) => __field12,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author" )),
                                        };
                                    let __field13 =
                                        match __field13 {
                                            Some(__field13) => __field13,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "score" )),
                                        };
                                    let __field14 =
                                        match __field14 {
                                            Some(__field14) => __field14,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "approved_by" )),
                                        };
                                    let __field15 =
                                        match __field15 {
                                            Some(__field15) => __field15,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "over_18" )),
                                        };
                                    let __field16 =
                                        match __field16 {
                                            Some(__field16) => __field16,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "hidden" )),
                                        };
                                    let __field17 =
                                        match __field17 {
                                            Some(__field17) => __field17,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "num_comments" )),
                                        };
                                    let __field18 =
                                        match __field18 {
                                            Some(__field18) => __field18,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "thumbnail" )),
                                        };
                                    let __field19 =
                                        match __field19 {
                                            Some(__field19) => __field19,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subreddit_id" )),
                                        };
                                    let __field20 =
                                        match __field20 {
                                            Some(__field20) => __field20,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "hide_score" )),
                                        };
                                    let __field21 =
                                        match __field21 {
                                            Some(__field21) => __field21,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "edited" )),
                                        };
                                    let __field22 =
                                        match __field22 {
                                            Some(__field22) => __field22,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "link_flair_css_class" )),
                                        };
                                    let __field23 =
                                        match __field23 {
                                            Some(__field23) => __field23,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author_flair_css_class" )),
                                        };
                                    let __field24 =
                                        match __field24 {
                                            Some(__field24) => __field24,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "downs" )),
                                        };
                                    let __field25 =
                                        match __field25 {
                                            Some(__field25) => __field25,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "ups" )),
                                        };
                                    let __field26 =
                                        match __field26 {
                                            Some(__field26) => __field26,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "saved" )),
                                        };
                                    let __field27 =
                                        match __field27 {
                                            Some(__field27) => __field27,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "removal_reason" )),
                                        };
                                    let __field28 =
                                        match __field28 {
                                            Some(__field28) => __field28,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "stickied" )),
                                        };
                                    let __field29 =
                                        match __field29 {
                                            Some(__field29) => __field29,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "is_self" )),
                                        };
                                    let __field30 =
                                        match __field30 {
                                            Some(__field30) => __field30,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "permalink" )),
                                        };
                                    let __field31 =
                                        match __field31 {
                                            Some(__field31) => __field31,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "locked" )),
                                        };
                                    let __field32 =
                                        match __field32 {
                                            Some(__field32) => __field32,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "name" )),
                                        };
                                    let __field33 =
                                        match __field33 {
                                            Some(__field33) => __field33,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created" )),
                                        };
                                    let __field34 =
                                        match __field34 {
                                            Some(__field34) => __field34,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "url" )),
                                        };
                                    let __field35 =
                                        match __field35 {
                                            Some(__field35) => __field35,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author_flair_text" )),
                                        };
                                    let __field36 =
                                        match __field36 {
                                            Some(__field36) => __field36,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "quarantine" )),
                                        };
                                    let __field37 =
                                        match __field37 {
                                            Some(__field37) => __field37,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "title" )),
                                        };
                                    let __field38 =
                                        match __field38 {
                                            Some(__field38) => __field38,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created_utc" )),
                                        };
                                    let __field39 =
                                        match __field39 {
                                            Some(__field39) => __field39,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "distinguished" )),
                                        };
                                    let __field40 =
                                        match __field40 {
                                            Some(__field40) => __field40,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "visited" )),
                                        };
                                    let __field41 =
                                        match __field41 {
                                            Some(__field41) => __field41,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "num_reports" )),
                                        };
                                    Ok(Submission{domain: __field0,
                                                  banned_by: __field1,
                                                  subreddit: __field2,
                                                  selftext_html: __field3,
                                                  selftext: __field4,
                                                  likes: __field5,
                                                  suggested_sort: __field6,
                                                  link_flair_text: __field7,
                                                  id: __field8,
                                                  gilded: __field9,
                                                  archived: __field10,
                                                  clicked: __field11,
                                                  author: __field12,
                                                  score: __field13,
                                                  approved_by: __field14,
                                                  over_18: __field15,
                                                  hidden: __field16,
                                                  num_comments: __field17,
                                                  thumbnail: __field18,
                                                  subreddit_id: __field19,
                                                  hide_score: __field20,
                                                  edited: __field21,
                                                  link_flair_css_class:
                                                      __field22,
                                                  author_flair_css_class:
                                                      __field23,
                                                  downs: __field24,
                                                  ups: __field25,
                                                  saved: __field26,
                                                  removal_reason: __field27,
                                                  stickied: __field28,
                                                  is_self: __field29,
                                                  permalink: __field30,
                                                  locked: __field31,
                                                  name: __field32,
                                                  created: __field33,
                                                  url: __field34,
                                                  author_flair_text:
                                                      __field35,
                                                  quarantine: __field36,
                                                  title: __field37,
                                                  created_utc: __field38,
                                                  distinguished: __field39,
                                                  visited: __field40,
                                                  num_reports: __field41,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["domain", "banned_by", "subreddit",
                              "selftext_html", "selftext", "likes",
                              "suggested_sort", "link_flair_text", "id",
                              "gilded", "archived", "clicked", "author",
                              "score", "approved_by", "over_18", "hidden",
                              "num_comments", "thumbnail", "subreddit_id",
                              "hide_score", "edited", "link_flair_css_class",
                              "author_flair_css_class", "downs", "ups",
                              "saved", "removal_reason", "stickied",
                              "is_self", "permalink", "locked", "name",
                              "created", "url", "author_flair_text",
                              "quarantine", "title", "created_utc",
                              "distinguished", "visited", "num_reports"];
                        deserializer.deserialize_struct("Submission", FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
}
pub mod auth {
    /// A response providing an access token from /api/v1/access_token which can be used for the
    /// OAuth-based authenticators
    #[derive(Debug)]
    pub struct TokenResponse {
        pub access_token: String,
        pub expires_in: u64,
        pub scope: String,
        pub token_type: String,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_TokenResponse: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for TokenResponse {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<TokenResponse, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "access_token" => {
                                                Ok(__Field::__field0)
                                            }
                                            "expires_in" => {
                                                Ok(__Field::__field1)
                                            }
                                            "scope" => {
                                                Ok(__Field::__field2)
                                            }
                                            "token_type" => {
                                                Ok(__Field::__field3)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"access_token" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"expires_in" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"scope" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"token_type" => {
                                                Ok(__Field::__field3)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            TokenResponse;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<TokenResponse,
                                                       __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(TokenResponse{access_token: __field0,
                                                     expires_in: __field1,
                                                     scope: __field2,
                                                     token_type: __field3,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<TokenResponse,
                                                       __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<String> = None;
                                    let mut __field1: Option<u64> = None;
                                    let mut __field2: Option<String> = None;
                                    let mut __field3: Option<String> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("access_token"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("expires_in"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("scope"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("token_type"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "access_token" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "expires_in" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "scope" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "token_type" )),
                                        };
                                    Ok(TokenResponse{access_token: __field0,
                                                     expires_in: __field1,
                                                     scope: __field2,
                                                     token_type: __field3,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["access_token", "expires_in", "scope",
                              "token_type"];
                        deserializer.deserialize_struct("TokenResponse",
                                                        FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
}
pub mod comment {
    use serde_json::Value;
    use responses::{BasicThing, ThingList};
    use responses::listing::ListingData;
    /// The 'listing' format for comments.
    pub type CommentListing = BasicThing<ListingData<Value>>;
    /// A deserializable structure representing a comment. This is created when the client returns
    /// JSON representing a comment and this is wrapped in a `models::comment::Comment` for
    /// ease-of-use.
    #[derive(Debug)]
    pub struct Comment {
        /// The Reddit ID for the subreddit where this was posted, **including the leading `t5_`**.
        pub subreddit_id: String,
        /// Contains the name of the moderator who banned this, if the logged-in user is a moderator
        /// of this subreddit and this is banned.
        pub banned_by: Option<String>,
        /// The reason for the post removal, if you are a moderator **and** this post has been
        /// removed.
        pub removal_reason: Option<String>,
        /// The ID (including kind) of the parent post (i.e. the link post or self post).
        pub link_id: String,
        /// This is `Some(true)` if the logged-in user has upvoted this submission, `Some(false)` if
        /// the user has downvoted this submission or `None` if the user has not voted.
        pub likes: Option<bool>,
        /// A listing of replies to this comment. Do not access this directly - use the functions
        /// of `Comment` instead.
        pub replies: Value,
        /// True if the logged-in user has saved this submission.
        pub saved: bool,
        /// The ID of the post in base-36 form, as used in Reddit's links.
        pub id: String,
        /// The amount of times that a user has been gilded (gifted Reddit Gold).
        pub gilded: u64,
        /// This is `true` if Reddit has archived the submission (usually done after 6 months).
        /// Archived submissions cannot be voted or commented upon.
        pub archived: bool,
        /// The name of the author of the submission (not including the leading `/u/`)
        pub author: String,
        /// The overall points score of this post, as shown on the upvote counter. This is the
        /// same as upvotes - downvotes (however, this figure may be fuzzed by Reddit, and may not
        /// be exact)
        pub score: i64,
        /// This contains the name of the user who approved this submission. This is `None` unless
        /// you are a mod of the subreddit **and** a user has approved this post.
        pub approved_by: Option<String>,
        /// The main post text.
        pub body: String,
        /// This is `false` if the submission is not edited and is the edit timestamp if it is edited.
        /// Access through the functions of `Submission` instead.
        pub edited: Value,
        /// The CSS class set for the author's flair (if available). If there is no flair, this is
        /// `None`.
        pub author_flair_css_class: Option<String>,
        /// The number of downvotes (fuzzed; see `score` for further explanation)
        pub downs: i64,
        /// The number of upvotes (fuzzed; see `score` for further explanation)
        pub ups: i64,
        /// Contains the HTML of the post body.
        pub body_html: String,
        /// The subreddit that this submission was posted in (not including `/r/`)
        pub subreddit: String,
        /// The full 'Thing ID', consisting of a 'kind' and a base-36 identifier. The valid kinds are:
        /// - t1_ - Comment
        /// - t2_ - Account
        /// - t3_ - Link
        /// - t4_ - Message
        /// - t5_ - Subreddit
        /// - t6_ - Award
        /// - t8_ - PromoCampaign
        pub name: String,
        /// `true` if the score should not be displayed.
        pub score_hidden: bool,
        /// This is `true` if this submission is stickied (an 'annoucement' thread)
        pub stickied: bool,
        /// A timestamp of the time when the post was created, in the logged-in user's **local**
        /// time.
        pub created: i64,
        /// The text of the author's flair, if present. Can be an empty string if the flair is present
        /// but contains no text.
        pub author_flair_text: Option<String>,
        /// A timestamp of the time when the post was created, in **UTC**.
        pub created_utc: i64,
        /// Indicates whether the user has used a special flag for themselves, e.g. [M] or [A].
        /// Possible values:
        /// - None - Normal user
        /// - Some("moderator") - [M]
        /// - Some("admin") - [A]
        /// - Some("special") - other special 'distinguishes' e.g. [Δ]
        pub distinguished: Option<String>,
        pub num_reports: Option<u64>,
        pub parent_id: String,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_Comment: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for Comment {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<Comment, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __field4,
                            __field5,
                            __field6,
                            __field7,
                            __field8,
                            __field9,
                            __field10,
                            __field11,
                            __field12,
                            __field13,
                            __field14,
                            __field15,
                            __field16,
                            __field17,
                            __field18,
                            __field19,
                            __field20,
                            __field21,
                            __field22,
                            __field23,
                            __field24,
                            __field25,
                            __field26,
                            __field27,
                            __field28,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            4usize => {
                                                Ok(__Field::__field4)
                                            }
                                            5usize => {
                                                Ok(__Field::__field5)
                                            }
                                            6usize => {
                                                Ok(__Field::__field6)
                                            }
                                            7usize => {
                                                Ok(__Field::__field7)
                                            }
                                            8usize => {
                                                Ok(__Field::__field8)
                                            }
                                            9usize => {
                                                Ok(__Field::__field9)
                                            }
                                            10usize => {
                                                Ok(__Field::__field10)
                                            }
                                            11usize => {
                                                Ok(__Field::__field11)
                                            }
                                            12usize => {
                                                Ok(__Field::__field12)
                                            }
                                            13usize => {
                                                Ok(__Field::__field13)
                                            }
                                            14usize => {
                                                Ok(__Field::__field14)
                                            }
                                            15usize => {
                                                Ok(__Field::__field15)
                                            }
                                            16usize => {
                                                Ok(__Field::__field16)
                                            }
                                            17usize => {
                                                Ok(__Field::__field17)
                                            }
                                            18usize => {
                                                Ok(__Field::__field18)
                                            }
                                            19usize => {
                                                Ok(__Field::__field19)
                                            }
                                            20usize => {
                                                Ok(__Field::__field20)
                                            }
                                            21usize => {
                                                Ok(__Field::__field21)
                                            }
                                            22usize => {
                                                Ok(__Field::__field22)
                                            }
                                            23usize => {
                                                Ok(__Field::__field23)
                                            }
                                            24usize => {
                                                Ok(__Field::__field24)
                                            }
                                            25usize => {
                                                Ok(__Field::__field25)
                                            }
                                            26usize => {
                                                Ok(__Field::__field26)
                                            }
                                            27usize => {
                                                Ok(__Field::__field27)
                                            }
                                            28usize => {
                                                Ok(__Field::__field28)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "subreddit_id" => {
                                                Ok(__Field::__field0)
                                            }
                                            "banned_by" => {
                                                Ok(__Field::__field1)
                                            }
                                            "removal_reason" => {
                                                Ok(__Field::__field2)
                                            }
                                            "link_id" => {
                                                Ok(__Field::__field3)
                                            }
                                            "likes" => {
                                                Ok(__Field::__field4)
                                            }
                                            "replies" => {
                                                Ok(__Field::__field5)
                                            }
                                            "saved" => {
                                                Ok(__Field::__field6)
                                            }
                                            "id" => { Ok(__Field::__field7) }
                                            "gilded" => {
                                                Ok(__Field::__field8)
                                            }
                                            "archived" => {
                                                Ok(__Field::__field9)
                                            }
                                            "author" => {
                                                Ok(__Field::__field10)
                                            }
                                            "score" => {
                                                Ok(__Field::__field11)
                                            }
                                            "approved_by" => {
                                                Ok(__Field::__field12)
                                            }
                                            "body" => {
                                                Ok(__Field::__field13)
                                            }
                                            "edited" => {
                                                Ok(__Field::__field14)
                                            }
                                            "author_flair_css_class" => {
                                                Ok(__Field::__field15)
                                            }
                                            "downs" => {
                                                Ok(__Field::__field16)
                                            }
                                            "ups" => {
                                                Ok(__Field::__field17)
                                            }
                                            "body_html" => {
                                                Ok(__Field::__field18)
                                            }
                                            "subreddit" => {
                                                Ok(__Field::__field19)
                                            }
                                            "name" => {
                                                Ok(__Field::__field20)
                                            }
                                            "score_hidden" => {
                                                Ok(__Field::__field21)
                                            }
                                            "stickied" => {
                                                Ok(__Field::__field22)
                                            }
                                            "created" => {
                                                Ok(__Field::__field23)
                                            }
                                            "author_flair_text" => {
                                                Ok(__Field::__field24)
                                            }
                                            "created_utc" => {
                                                Ok(__Field::__field25)
                                            }
                                            "distinguished" => {
                                                Ok(__Field::__field26)
                                            }
                                            "num_reports" => {
                                                Ok(__Field::__field27)
                                            }
                                            "parent_id" => {
                                                Ok(__Field::__field28)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"subreddit_id" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"banned_by" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"removal_reason" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"link_id" => {
                                                Ok(__Field::__field3)
                                            }
                                            b"likes" => {
                                                Ok(__Field::__field4)
                                            }
                                            b"replies" => {
                                                Ok(__Field::__field5)
                                            }
                                            b"saved" => {
                                                Ok(__Field::__field6)
                                            }
                                            b"id" => { Ok(__Field::__field7) }
                                            b"gilded" => {
                                                Ok(__Field::__field8)
                                            }
                                            b"archived" => {
                                                Ok(__Field::__field9)
                                            }
                                            b"author" => {
                                                Ok(__Field::__field10)
                                            }
                                            b"score" => {
                                                Ok(__Field::__field11)
                                            }
                                            b"approved_by" => {
                                                Ok(__Field::__field12)
                                            }
                                            b"body" => {
                                                Ok(__Field::__field13)
                                            }
                                            b"edited" => {
                                                Ok(__Field::__field14)
                                            }
                                            b"author_flair_css_class" => {
                                                Ok(__Field::__field15)
                                            }
                                            b"downs" => {
                                                Ok(__Field::__field16)
                                            }
                                            b"ups" => {
                                                Ok(__Field::__field17)
                                            }
                                            b"body_html" => {
                                                Ok(__Field::__field18)
                                            }
                                            b"subreddit" => {
                                                Ok(__Field::__field19)
                                            }
                                            b"name" => {
                                                Ok(__Field::__field20)
                                            }
                                            b"score_hidden" => {
                                                Ok(__Field::__field21)
                                            }
                                            b"stickied" => {
                                                Ok(__Field::__field22)
                                            }
                                            b"created" => {
                                                Ok(__Field::__field23)
                                            }
                                            b"author_flair_text" => {
                                                Ok(__Field::__field24)
                                            }
                                            b"created_utc" => {
                                                Ok(__Field::__field25)
                                            }
                                            b"distinguished" => {
                                                Ok(__Field::__field26)
                                            }
                                            b"num_reports" => {
                                                Ok(__Field::__field27)
                                            }
                                            b"parent_id" => {
                                                Ok(__Field::__field28)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            Comment;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<Comment, __V::Error>
                             where __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    let __field4 =
                                        match try!(visitor . visit :: < Option
                                                   < bool > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(4usize));
                                            }
                                        };
                                    let __field5 =
                                        match try!(visitor . visit :: < Value
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(5usize));
                                            }
                                        };
                                    let __field6 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(6usize));
                                            }
                                        };
                                    let __field7 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(7usize));
                                            }
                                        };
                                    let __field8 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(8usize));
                                            }
                                        };
                                    let __field9 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(9usize));
                                            }
                                        };
                                    let __field10 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(10usize));
                                            }
                                        };
                                    let __field11 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(11usize));
                                            }
                                        };
                                    let __field12 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(12usize));
                                            }
                                        };
                                    let __field13 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(13usize));
                                            }
                                        };
                                    let __field14 =
                                        match try!(visitor . visit :: < Value
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(14usize));
                                            }
                                        };
                                    let __field15 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(15usize));
                                            }
                                        };
                                    let __field16 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(16usize));
                                            }
                                        };
                                    let __field17 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(17usize));
                                            }
                                        };
                                    let __field18 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(18usize));
                                            }
                                        };
                                    let __field19 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(19usize));
                                            }
                                        };
                                    let __field20 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(20usize));
                                            }
                                        };
                                    let __field21 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(21usize));
                                            }
                                        };
                                    let __field22 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(22usize));
                                            }
                                        };
                                    let __field23 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(23usize));
                                            }
                                        };
                                    let __field24 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(24usize));
                                            }
                                        };
                                    let __field25 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(25usize));
                                            }
                                        };
                                    let __field26 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(26usize));
                                            }
                                        };
                                    let __field27 =
                                        match try!(visitor . visit :: < Option
                                                   < u64 > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(27usize));
                                            }
                                        };
                                    let __field28 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(28usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(Comment{subreddit_id: __field0,
                                               banned_by: __field1,
                                               removal_reason: __field2,
                                               link_id: __field3,
                                               likes: __field4,
                                               replies: __field5,
                                               saved: __field6,
                                               id: __field7,
                                               gilded: __field8,
                                               archived: __field9,
                                               author: __field10,
                                               score: __field11,
                                               approved_by: __field12,
                                               body: __field13,
                                               edited: __field14,
                                               author_flair_css_class:
                                                   __field15,
                                               downs: __field16,
                                               ups: __field17,
                                               body_html: __field18,
                                               subreddit: __field19,
                                               name: __field20,
                                               score_hidden: __field21,
                                               stickied: __field22,
                                               created: __field23,
                                               author_flair_text: __field24,
                                               created_utc: __field25,
                                               distinguished: __field26,
                                               num_reports: __field27,
                                               parent_id: __field28,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<Comment, __V::Error>
                             where __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<String> = None;
                                    let mut __field1: Option<Option<String>> =
                                        None;
                                    let mut __field2: Option<Option<String>> =
                                        None;
                                    let mut __field3: Option<String> = None;
                                    let mut __field4: Option<Option<bool>> =
                                        None;
                                    let mut __field5: Option<Value> = None;
                                    let mut __field6: Option<bool> = None;
                                    let mut __field7: Option<String> = None;
                                    let mut __field8: Option<u64> = None;
                                    let mut __field9: Option<bool> = None;
                                    let mut __field10: Option<String> = None;
                                    let mut __field11: Option<i64> = None;
                                    let mut __field12:
                                            Option<Option<String>> = None;
                                    let mut __field13: Option<String> = None;
                                    let mut __field14: Option<Value> = None;
                                    let mut __field15:
                                            Option<Option<String>> = None;
                                    let mut __field16: Option<i64> = None;
                                    let mut __field17: Option<i64> = None;
                                    let mut __field18: Option<String> = None;
                                    let mut __field19: Option<String> = None;
                                    let mut __field20: Option<String> = None;
                                    let mut __field21: Option<bool> = None;
                                    let mut __field22: Option<bool> = None;
                                    let mut __field23: Option<i64> = None;
                                    let mut __field24:
                                            Option<Option<String>> = None;
                                    let mut __field25: Option<i64> = None;
                                    let mut __field26:
                                            Option<Option<String>> = None;
                                    let mut __field27: Option<Option<u64>> =
                                        None;
                                    let mut __field28: Option<String> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subreddit_id"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("banned_by"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("removal_reason"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("link_id"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field4 => {
                                                if __field4.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("likes"));
                                                }
                                                __field4 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < bool >
                                                              > (  )));
                                            }
                                            __Field::__field5 => {
                                                if __field5.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("replies"));
                                                }
                                                __field5 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Value > (  )));
                                            }
                                            __Field::__field6 => {
                                                if __field6.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("saved"));
                                                }
                                                __field6 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field7 => {
                                                if __field7.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("id"));
                                                }
                                                __field7 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field8 => {
                                                if __field8.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("gilded"));
                                                }
                                                __field8 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field9 => {
                                                if __field9.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("archived"));
                                                }
                                                __field9 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field10 => {
                                                if __field10.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author"));
                                                }
                                                __field10 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field11 => {
                                                if __field11.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("score"));
                                                }
                                                __field11 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field12 => {
                                                if __field12.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("approved_by"));
                                                }
                                                __field12 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field13 => {
                                                if __field13.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("body"));
                                                }
                                                __field13 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field14 => {
                                                if __field14.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("edited"));
                                                }
                                                __field14 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Value > (  )));
                                            }
                                            __Field::__field15 => {
                                                if __field15.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author_flair_css_class"));
                                                }
                                                __field15 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field16 => {
                                                if __field16.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("downs"));
                                                }
                                                __field16 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field17 => {
                                                if __field17.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("ups"));
                                                }
                                                __field17 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field18 => {
                                                if __field18.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("body_html"));
                                                }
                                                __field18 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field19 => {
                                                if __field19.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subreddit"));
                                                }
                                                __field19 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field20 => {
                                                if __field20.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("name"));
                                                }
                                                __field20 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field21 => {
                                                if __field21.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("score_hidden"));
                                                }
                                                __field21 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field22 => {
                                                if __field22.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("stickied"));
                                                }
                                                __field22 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field23 => {
                                                if __field23.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created"));
                                                }
                                                __field23 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field24 => {
                                                if __field24.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author_flair_text"));
                                                }
                                                __field24 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field25 => {
                                                if __field25.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created_utc"));
                                                }
                                                __field25 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field26 => {
                                                if __field26.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("distinguished"));
                                                }
                                                __field26 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field27 => {
                                                if __field27.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("num_reports"));
                                                }
                                                __field27 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < u64 > >
                                                              (  )));
                                            }
                                            __Field::__field28 => {
                                                if __field28.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("parent_id"));
                                                }
                                                __field28 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subreddit_id" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "banned_by" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "removal_reason" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "link_id" )),
                                        };
                                    let __field4 =
                                        match __field4 {
                                            Some(__field4) => __field4,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "likes" )),
                                        };
                                    let __field5 =
                                        match __field5 {
                                            Some(__field5) => __field5,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "replies" )),
                                        };
                                    let __field6 =
                                        match __field6 {
                                            Some(__field6) => __field6,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "saved" )),
                                        };
                                    let __field7 =
                                        match __field7 {
                                            Some(__field7) => __field7,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "id" )),
                                        };
                                    let __field8 =
                                        match __field8 {
                                            Some(__field8) => __field8,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "gilded" )),
                                        };
                                    let __field9 =
                                        match __field9 {
                                            Some(__field9) => __field9,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "archived" )),
                                        };
                                    let __field10 =
                                        match __field10 {
                                            Some(__field10) => __field10,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author" )),
                                        };
                                    let __field11 =
                                        match __field11 {
                                            Some(__field11) => __field11,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "score" )),
                                        };
                                    let __field12 =
                                        match __field12 {
                                            Some(__field12) => __field12,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "approved_by" )),
                                        };
                                    let __field13 =
                                        match __field13 {
                                            Some(__field13) => __field13,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "body" )),
                                        };
                                    let __field14 =
                                        match __field14 {
                                            Some(__field14) => __field14,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "edited" )),
                                        };
                                    let __field15 =
                                        match __field15 {
                                            Some(__field15) => __field15,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author_flair_css_class" )),
                                        };
                                    let __field16 =
                                        match __field16 {
                                            Some(__field16) => __field16,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "downs" )),
                                        };
                                    let __field17 =
                                        match __field17 {
                                            Some(__field17) => __field17,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "ups" )),
                                        };
                                    let __field18 =
                                        match __field18 {
                                            Some(__field18) => __field18,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "body_html" )),
                                        };
                                    let __field19 =
                                        match __field19 {
                                            Some(__field19) => __field19,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subreddit" )),
                                        };
                                    let __field20 =
                                        match __field20 {
                                            Some(__field20) => __field20,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "name" )),
                                        };
                                    let __field21 =
                                        match __field21 {
                                            Some(__field21) => __field21,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "score_hidden" )),
                                        };
                                    let __field22 =
                                        match __field22 {
                                            Some(__field22) => __field22,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "stickied" )),
                                        };
                                    let __field23 =
                                        match __field23 {
                                            Some(__field23) => __field23,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created" )),
                                        };
                                    let __field24 =
                                        match __field24 {
                                            Some(__field24) => __field24,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author_flair_text" )),
                                        };
                                    let __field25 =
                                        match __field25 {
                                            Some(__field25) => __field25,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created_utc" )),
                                        };
                                    let __field26 =
                                        match __field26 {
                                            Some(__field26) => __field26,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "distinguished" )),
                                        };
                                    let __field27 =
                                        match __field27 {
                                            Some(__field27) => __field27,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "num_reports" )),
                                        };
                                    let __field28 =
                                        match __field28 {
                                            Some(__field28) => __field28,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "parent_id" )),
                                        };
                                    Ok(Comment{subreddit_id: __field0,
                                               banned_by: __field1,
                                               removal_reason: __field2,
                                               link_id: __field3,
                                               likes: __field4,
                                               replies: __field5,
                                               saved: __field6,
                                               id: __field7,
                                               gilded: __field8,
                                               archived: __field9,
                                               author: __field10,
                                               score: __field11,
                                               approved_by: __field12,
                                               body: __field13,
                                               edited: __field14,
                                               author_flair_css_class:
                                                   __field15,
                                               downs: __field16,
                                               ups: __field17,
                                               body_html: __field18,
                                               subreddit: __field19,
                                               name: __field20,
                                               score_hidden: __field21,
                                               stickied: __field22,
                                               created: __field23,
                                               author_flair_text: __field24,
                                               created_utc: __field25,
                                               distinguished: __field26,
                                               num_reports: __field27,
                                               parent_id: __field28,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["subreddit_id", "banned_by", "removal_reason",
                              "link_id", "likes", "replies", "saved", "id",
                              "gilded", "archived", "author", "score",
                              "approved_by", "body", "edited",
                              "author_flair_css_class", "downs", "ups",
                              "body_html", "subreddit", "name",
                              "score_hidden", "stickied", "created",
                              "author_flair_text", "created_utc",
                              "distinguished", "num_reports", "parent_id"];
                        deserializer.deserialize_struct("Comment", FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
    #[derive(Debug)]
    pub struct More {
        pub count: u64,
        pub parent_id: String,
        pub children: Vec<String>,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_More: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for More {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<More, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "count" => {
                                                Ok(__Field::__field0)
                                            }
                                            "parent_id" => {
                                                Ok(__Field::__field1)
                                            }
                                            "children" => {
                                                Ok(__Field::__field2)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"count" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"parent_id" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"children" => {
                                                Ok(__Field::__field2)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            More;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<More, __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < u64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < Vec <
                                                   String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(More{count: __field0,
                                            parent_id: __field1,
                                            children: __field2,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<More, __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<u64> = None;
                                    let mut __field1: Option<String> = None;
                                    let mut __field2: Option<Vec<String>> =
                                        None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("count"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              u64 > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("parent_id"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("children"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Vec < String > >
                                                              (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "count" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "parent_id" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "children" )),
                                        };
                                    Ok(More{count: __field0,
                                            parent_id: __field1,
                                            children: __field2,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["count", "parent_id", "children"];
                        deserializer.deserialize_struct("More", FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
    #[derive(Debug)]
    pub struct MoreComments {
        pub json: MoreCommentsInner,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_MoreComments: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for MoreComments {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<MoreComments, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field { __field0, __ignore, }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "json" => {
                                                Ok(__Field::__field0)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"json" => {
                                                Ok(__Field::__field0)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            MoreComments;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<MoreComments,
                                                       __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: <
                                                   MoreCommentsInner > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(MoreComments{json: __field0,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<MoreComments,
                                                       __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0:
                                            Option<MoreCommentsInner> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("json"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              MoreCommentsInner
                                                              > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "json" )),
                                        };
                                    Ok(MoreComments{json: __field0,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] = &["json"];
                        deserializer.deserialize_struct("MoreComments",
                                                        FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
    #[derive(Debug)]
    pub struct MoreCommentsInner {
        pub errors: Vec<Value>,
        pub data: ThingList,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_MoreCommentsInner: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for MoreCommentsInner {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<MoreCommentsInner, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field { __field0, __field1, __ignore, }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "errors" => {
                                                Ok(__Field::__field0)
                                            }
                                            "data" => {
                                                Ok(__Field::__field1)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"errors" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"data" => {
                                                Ok(__Field::__field1)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            MoreCommentsInner;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<MoreCommentsInner,
                                                       __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < Vec <
                                                   Value > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: <
                                                   ThingList > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(MoreCommentsInner{errors: __field0,
                                                         data: __field1,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<MoreCommentsInner,
                                                       __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<Vec<Value>> =
                                        None;
                                    let mut __field1: Option<ThingList> =
                                        None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("errors"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Vec < Value > >
                                                              (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("data"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              ThingList > (
                                                              )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "errors" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "data" )),
                                        };
                                    Ok(MoreCommentsInner{errors: __field0,
                                                         data: __field1,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["errors", "data"];
                        deserializer.deserialize_struct("MoreCommentsInner",
                                                        FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
}
pub mod user {
    use responses::BasicThing;
    /// API response for /user/username/about
    pub type UserAbout = BasicThing<UserAboutData>;
    #[derive(Debug)]
    pub struct UserAboutData {
        pub name: String,
        pub is_friend: bool,
        pub hide_from_robots: bool,
        pub id: String,
        pub created: i64,
        pub created_utc: i64,
        pub link_karma: i64,
        pub comment_karma: i64,
        pub is_gold: bool,
        pub is_mod: bool,
        pub has_verified_email: bool,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_UserAboutData: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for UserAboutData {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<UserAboutData, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __field4,
                            __field5,
                            __field6,
                            __field7,
                            __field8,
                            __field9,
                            __field10,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            4usize => {
                                                Ok(__Field::__field4)
                                            }
                                            5usize => {
                                                Ok(__Field::__field5)
                                            }
                                            6usize => {
                                                Ok(__Field::__field6)
                                            }
                                            7usize => {
                                                Ok(__Field::__field7)
                                            }
                                            8usize => {
                                                Ok(__Field::__field8)
                                            }
                                            9usize => {
                                                Ok(__Field::__field9)
                                            }
                                            10usize => {
                                                Ok(__Field::__field10)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "name" => {
                                                Ok(__Field::__field0)
                                            }
                                            "is_friend" => {
                                                Ok(__Field::__field1)
                                            }
                                            "hide_from_robots" => {
                                                Ok(__Field::__field2)
                                            }
                                            "id" => { Ok(__Field::__field3) }
                                            "created" => {
                                                Ok(__Field::__field4)
                                            }
                                            "created_utc" => {
                                                Ok(__Field::__field5)
                                            }
                                            "link_karma" => {
                                                Ok(__Field::__field6)
                                            }
                                            "comment_karma" => {
                                                Ok(__Field::__field7)
                                            }
                                            "is_gold" => {
                                                Ok(__Field::__field8)
                                            }
                                            "is_mod" => {
                                                Ok(__Field::__field9)
                                            }
                                            "has_verified_email" => {
                                                Ok(__Field::__field10)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"name" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"is_friend" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"hide_from_robots" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"id" => { Ok(__Field::__field3) }
                                            b"created" => {
                                                Ok(__Field::__field4)
                                            }
                                            b"created_utc" => {
                                                Ok(__Field::__field5)
                                            }
                                            b"link_karma" => {
                                                Ok(__Field::__field6)
                                            }
                                            b"comment_karma" => {
                                                Ok(__Field::__field7)
                                            }
                                            b"is_gold" => {
                                                Ok(__Field::__field8)
                                            }
                                            b"is_mod" => {
                                                Ok(__Field::__field9)
                                            }
                                            b"has_verified_email" => {
                                                Ok(__Field::__field10)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            UserAboutData;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<UserAboutData,
                                                       __V::Error> where
                             __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    let __field4 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(4usize));
                                            }
                                        };
                                    let __field5 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(5usize));
                                            }
                                        };
                                    let __field6 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(6usize));
                                            }
                                        };
                                    let __field7 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(7usize));
                                            }
                                        };
                                    let __field8 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(8usize));
                                            }
                                        };
                                    let __field9 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(9usize));
                                            }
                                        };
                                    let __field10 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(10usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(UserAboutData{name: __field0,
                                                     is_friend: __field1,
                                                     hide_from_robots:
                                                         __field2,
                                                     id: __field3,
                                                     created: __field4,
                                                     created_utc: __field5,
                                                     link_karma: __field6,
                                                     comment_karma: __field7,
                                                     is_gold: __field8,
                                                     is_mod: __field9,
                                                     has_verified_email:
                                                         __field10,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             ->
                                 ::std::result::Result<UserAboutData,
                                                       __V::Error> where
                             __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<String> = None;
                                    let mut __field1: Option<bool> = None;
                                    let mut __field2: Option<bool> = None;
                                    let mut __field3: Option<String> = None;
                                    let mut __field4: Option<i64> = None;
                                    let mut __field5: Option<i64> = None;
                                    let mut __field6: Option<i64> = None;
                                    let mut __field7: Option<i64> = None;
                                    let mut __field8: Option<bool> = None;
                                    let mut __field9: Option<bool> = None;
                                    let mut __field10: Option<bool> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("name"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("is_friend"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("hide_from_robots"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("id"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field4 => {
                                                if __field4.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created"));
                                                }
                                                __field4 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field5 => {
                                                if __field5.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created_utc"));
                                                }
                                                __field5 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field6 => {
                                                if __field6.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("link_karma"));
                                                }
                                                __field6 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field7 => {
                                                if __field7.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("comment_karma"));
                                                }
                                                __field7 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field8 => {
                                                if __field8.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("is_gold"));
                                                }
                                                __field8 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field9 => {
                                                if __field9.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("is_mod"));
                                                }
                                                __field9 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field10 => {
                                                if __field10.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("has_verified_email"));
                                                }
                                                __field10 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "name" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "is_friend" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "hide_from_robots" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "id" )),
                                        };
                                    let __field4 =
                                        match __field4 {
                                            Some(__field4) => __field4,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created" )),
                                        };
                                    let __field5 =
                                        match __field5 {
                                            Some(__field5) => __field5,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created_utc" )),
                                        };
                                    let __field6 =
                                        match __field6 {
                                            Some(__field6) => __field6,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "link_karma" )),
                                        };
                                    let __field7 =
                                        match __field7 {
                                            Some(__field7) => __field7,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "comment_karma" )),
                                        };
                                    let __field8 =
                                        match __field8 {
                                            Some(__field8) => __field8,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "is_gold" )),
                                        };
                                    let __field9 =
                                        match __field9 {
                                            Some(__field9) => __field9,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "is_mod" )),
                                        };
                                    let __field10 =
                                        match __field10 {
                                            Some(__field10) => __field10,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "has_verified_email" )),
                                        };
                                    Ok(UserAboutData{name: __field0,
                                                     is_friend: __field1,
                                                     hide_from_robots:
                                                         __field2,
                                                     id: __field3,
                                                     created: __field4,
                                                     created_utc: __field5,
                                                     link_karma: __field6,
                                                     comment_karma: __field7,
                                                     is_gold: __field8,
                                                     is_mod: __field9,
                                                     has_verified_email:
                                                         __field10,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["name", "is_friend", "hide_from_robots", "id",
                              "created", "created_utc", "link_karma",
                              "comment_karma", "is_gold", "is_mod",
                              "has_verified_email"];
                        deserializer.deserialize_struct("UserAboutData",
                                                        FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
}
pub mod messages {
    use responses::listing::ListingData;
    use responses::BasicThing;
    use serde_json::Value;
    pub type MessageListing = BasicThing<ListingData<Message>>;
    #[derive(Debug)]
    pub struct Message {
        pub author: Option<String>,
        pub body: String,
        pub body_html: String,
        pub context: String,
        pub first_message_name: Option<String>,
        pub likes: Option<bool>,
        pub name: String,
        pub link_title: Option<String>,
        pub parent_id: Option<String>,
        pub replies: Value,
        pub subject: String,
        pub subreddit: Option<String>,
        pub was_comment: bool,
        pub created: i64,
        pub created_utc: i64,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _IMPL_DESERIALIZE_FOR_Message: () =
        {
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::de::Deserialize for Message {
                fn deserialize<__D>(deserializer: &mut __D)
                 -> ::std::result::Result<Message, __D::Error> where
                 __D: _serde::de::Deserializer {
                    {
                        #[allow(non_camel_case_types)]
                        enum __Field {
                            __field0,
                            __field1,
                            __field2,
                            __field3,
                            __field4,
                            __field5,
                            __field6,
                            __field7,
                            __field8,
                            __field9,
                            __field10,
                            __field11,
                            __field12,
                            __field13,
                            __field14,
                            __ignore,
                        }
                        impl _serde::de::Deserialize for __Field {
                            #[inline]
                            fn deserialize<__D>(deserializer: &mut __D)
                             -> ::std::result::Result<__Field, __D::Error>
                             where __D: _serde::de::Deserializer {
                                struct __FieldVisitor<__D> {
                                    phantom: ::std::marker::PhantomData<__D>,
                                }
                                impl <__D> _serde::de::Visitor for
                                 __FieldVisitor<__D> where
                                 __D: _serde::de::Deserializer {
                                    type
                                    Value
                                    =
                                    __Field;
                                    fn visit_usize<__E>(&mut self,
                                                        value: usize)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            0usize => {
                                                Ok(__Field::__field0)
                                            }
                                            1usize => {
                                                Ok(__Field::__field1)
                                            }
                                            2usize => {
                                                Ok(__Field::__field2)
                                            }
                                            3usize => {
                                                Ok(__Field::__field3)
                                            }
                                            4usize => {
                                                Ok(__Field::__field4)
                                            }
                                            5usize => {
                                                Ok(__Field::__field5)
                                            }
                                            6usize => {
                                                Ok(__Field::__field6)
                                            }
                                            7usize => {
                                                Ok(__Field::__field7)
                                            }
                                            8usize => {
                                                Ok(__Field::__field8)
                                            }
                                            9usize => {
                                                Ok(__Field::__field9)
                                            }
                                            10usize => {
                                                Ok(__Field::__field10)
                                            }
                                            11usize => {
                                                Ok(__Field::__field11)
                                            }
                                            12usize => {
                                                Ok(__Field::__field12)
                                            }
                                            13usize => {
                                                Ok(__Field::__field13)
                                            }
                                            14usize => {
                                                Ok(__Field::__field14)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_str<__E>(&mut self, value: &str)
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            "author" => {
                                                Ok(__Field::__field0)
                                            }
                                            "body" => {
                                                Ok(__Field::__field1)
                                            }
                                            "body_html" => {
                                                Ok(__Field::__field2)
                                            }
                                            "context" => {
                                                Ok(__Field::__field3)
                                            }
                                            "first_message_name" => {
                                                Ok(__Field::__field4)
                                            }
                                            "likes" => {
                                                Ok(__Field::__field5)
                                            }
                                            "name" => {
                                                Ok(__Field::__field6)
                                            }
                                            "link_title" => {
                                                Ok(__Field::__field7)
                                            }
                                            "parent_id" => {
                                                Ok(__Field::__field8)
                                            }
                                            "replies" => {
                                                Ok(__Field::__field9)
                                            }
                                            "subject" => {
                                                Ok(__Field::__field10)
                                            }
                                            "subreddit" => {
                                                Ok(__Field::__field11)
                                            }
                                            "was_comment" => {
                                                Ok(__Field::__field12)
                                            }
                                            "created" => {
                                                Ok(__Field::__field13)
                                            }
                                            "created_utc" => {
                                                Ok(__Field::__field14)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                    fn visit_bytes<__E>(&mut self,
                                                        value: &[u8])
                                     -> ::std::result::Result<__Field, __E>
                                     where __E: _serde::de::Error {
                                        match value {
                                            b"author" => {
                                                Ok(__Field::__field0)
                                            }
                                            b"body" => {
                                                Ok(__Field::__field1)
                                            }
                                            b"body_html" => {
                                                Ok(__Field::__field2)
                                            }
                                            b"context" => {
                                                Ok(__Field::__field3)
                                            }
                                            b"first_message_name" => {
                                                Ok(__Field::__field4)
                                            }
                                            b"likes" => {
                                                Ok(__Field::__field5)
                                            }
                                            b"name" => {
                                                Ok(__Field::__field6)
                                            }
                                            b"link_title" => {
                                                Ok(__Field::__field7)
                                            }
                                            b"parent_id" => {
                                                Ok(__Field::__field8)
                                            }
                                            b"replies" => {
                                                Ok(__Field::__field9)
                                            }
                                            b"subject" => {
                                                Ok(__Field::__field10)
                                            }
                                            b"subreddit" => {
                                                Ok(__Field::__field11)
                                            }
                                            b"was_comment" => {
                                                Ok(__Field::__field12)
                                            }
                                            b"created" => {
                                                Ok(__Field::__field13)
                                            }
                                            b"created_utc" => {
                                                Ok(__Field::__field14)
                                            }
                                            _ => Ok(__Field::__ignore),
                                        }
                                    }
                                }
                                deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                                ::std::marker::PhantomData,})
                            }
                        }
                        struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                        impl <__D: _serde::de::Deserializer>
                         _serde::de::Visitor for __Visitor<__D> {
                            type
                            Value
                            =
                            Message;
                            #[inline]
                            fn visit_seq<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<Message, __V::Error>
                             where __V: _serde::de::SeqVisitor {
                                {
                                    let __field0 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(0usize));
                                            }
                                        };
                                    let __field1 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(1usize));
                                            }
                                        };
                                    let __field2 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(2usize));
                                            }
                                        };
                                    let __field3 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(3usize));
                                            }
                                        };
                                    let __field4 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(4usize));
                                            }
                                        };
                                    let __field5 =
                                        match try!(visitor . visit :: < Option
                                                   < bool > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(5usize));
                                            }
                                        };
                                    let __field6 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(6usize));
                                            }
                                        };
                                    let __field7 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(7usize));
                                            }
                                        };
                                    let __field8 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(8usize));
                                            }
                                        };
                                    let __field9 =
                                        match try!(visitor . visit :: < Value
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(9usize));
                                            }
                                        };
                                    let __field10 =
                                        match try!(visitor . visit :: < String
                                                   > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(10usize));
                                            }
                                        };
                                    let __field11 =
                                        match try!(visitor . visit :: < Option
                                                   < String > > (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(11usize));
                                            }
                                        };
                                    let __field12 =
                                        match try!(visitor . visit :: < bool >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(12usize));
                                            }
                                        };
                                    let __field13 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(13usize));
                                            }
                                        };
                                    let __field14 =
                                        match try!(visitor . visit :: < i64 >
                                                   (  )) {
                                            Some(value) => { value }
                                            None => {
                                                try!(visitor . end (  ));
                                                return Err(_serde::de::Error::invalid_length(14usize));
                                            }
                                        };
                                    try!(visitor . end (  ));
                                    Ok(Message{author: __field0,
                                               body: __field1,
                                               body_html: __field2,
                                               context: __field3,
                                               first_message_name: __field4,
                                               likes: __field5,
                                               name: __field6,
                                               link_title: __field7,
                                               parent_id: __field8,
                                               replies: __field9,
                                               subject: __field10,
                                               subreddit: __field11,
                                               was_comment: __field12,
                                               created: __field13,
                                               created_utc: __field14,})
                                }
                            }
                            #[inline]
                            fn visit_map<__V>(&mut self, mut visitor: __V)
                             -> ::std::result::Result<Message, __V::Error>
                             where __V: _serde::de::MapVisitor {
                                {
                                    let mut __field0: Option<Option<String>> =
                                        None;
                                    let mut __field1: Option<String> = None;
                                    let mut __field2: Option<String> = None;
                                    let mut __field3: Option<String> = None;
                                    let mut __field4: Option<Option<String>> =
                                        None;
                                    let mut __field5: Option<Option<bool>> =
                                        None;
                                    let mut __field6: Option<String> = None;
                                    let mut __field7: Option<Option<String>> =
                                        None;
                                    let mut __field8: Option<Option<String>> =
                                        None;
                                    let mut __field9: Option<Value> = None;
                                    let mut __field10: Option<String> = None;
                                    let mut __field11:
                                            Option<Option<String>> = None;
                                    let mut __field12: Option<bool> = None;
                                    let mut __field13: Option<i64> = None;
                                    let mut __field14: Option<i64> = None;
                                    while let Some(key) =
                                              try!(visitor . visit_key :: <
                                                   __Field > (  )) {
                                        match key {
                                            __Field::__field0 => {
                                                if __field0.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("author"));
                                                }
                                                __field0 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field1 => {
                                                if __field1.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("body"));
                                                }
                                                __field1 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field2 => {
                                                if __field2.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("body_html"));
                                                }
                                                __field2 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field3 => {
                                                if __field3.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("context"));
                                                }
                                                __field3 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field4 => {
                                                if __field4.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("first_message_name"));
                                                }
                                                __field4 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field5 => {
                                                if __field5.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("likes"));
                                                }
                                                __field5 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < bool >
                                                              > (  )));
                                            }
                                            __Field::__field6 => {
                                                if __field6.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("name"));
                                                }
                                                __field6 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field7 => {
                                                if __field7.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("link_title"));
                                                }
                                                __field7 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field8 => {
                                                if __field8.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("parent_id"));
                                                }
                                                __field8 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field9 => {
                                                if __field9.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("replies"));
                                                }
                                                __field9 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Value > (  )));
                                            }
                                            __Field::__field10 => {
                                                if __field10.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subject"));
                                                }
                                                __field10 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              String > (  )));
                                            }
                                            __Field::__field11 => {
                                                if __field11.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("subreddit"));
                                                }
                                                __field11 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              Option < String
                                                              > > (  )));
                                            }
                                            __Field::__field12 => {
                                                if __field12.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("was_comment"));
                                                }
                                                __field12 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              bool > (  )));
                                            }
                                            __Field::__field13 => {
                                                if __field13.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created"));
                                                }
                                                __field13 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            __Field::__field14 => {
                                                if __field14.is_some() {
                                                    return Err(<__V::Error as
                                                                   _serde::de::Error>::duplicate_field("created_utc"));
                                                }
                                                __field14 =
                                                    Some(try!(visitor .
                                                              visit_value :: <
                                                              i64 > (  )));
                                            }
                                            _ => {
                                                try!(visitor . visit_value ::
                                                     < _serde :: de :: impls
                                                     :: IgnoredAny > (  ));
                                            }
                                        }
                                    }
                                    try!(visitor . end (  ));
                                    let __field0 =
                                        match __field0 {
                                            Some(__field0) => __field0,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "author" )),
                                        };
                                    let __field1 =
                                        match __field1 {
                                            Some(__field1) => __field1,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "body" )),
                                        };
                                    let __field2 =
                                        match __field2 {
                                            Some(__field2) => __field2,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "body_html" )),
                                        };
                                    let __field3 =
                                        match __field3 {
                                            Some(__field3) => __field3,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "context" )),
                                        };
                                    let __field4 =
                                        match __field4 {
                                            Some(__field4) => __field4,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "first_message_name" )),
                                        };
                                    let __field5 =
                                        match __field5 {
                                            Some(__field5) => __field5,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "likes" )),
                                        };
                                    let __field6 =
                                        match __field6 {
                                            Some(__field6) => __field6,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "name" )),
                                        };
                                    let __field7 =
                                        match __field7 {
                                            Some(__field7) => __field7,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "link_title" )),
                                        };
                                    let __field8 =
                                        match __field8 {
                                            Some(__field8) => __field8,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "parent_id" )),
                                        };
                                    let __field9 =
                                        match __field9 {
                                            Some(__field9) => __field9,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "replies" )),
                                        };
                                    let __field10 =
                                        match __field10 {
                                            Some(__field10) => __field10,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subject" )),
                                        };
                                    let __field11 =
                                        match __field11 {
                                            Some(__field11) => __field11,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "subreddit" )),
                                        };
                                    let __field12 =
                                        match __field12 {
                                            Some(__field12) => __field12,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "was_comment" )),
                                        };
                                    let __field13 =
                                        match __field13 {
                                            Some(__field13) => __field13,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created" )),
                                        };
                                    let __field14 =
                                        match __field14 {
                                            Some(__field14) => __field14,
                                            None =>
                                            try!(visitor . missing_field (
                                                 "created_utc" )),
                                        };
                                    Ok(Message{author: __field0,
                                               body: __field1,
                                               body_html: __field2,
                                               context: __field3,
                                               first_message_name: __field4,
                                               likes: __field5,
                                               name: __field6,
                                               link_title: __field7,
                                               parent_id: __field8,
                                               replies: __field9,
                                               subject: __field10,
                                               subreddit: __field11,
                                               was_comment: __field12,
                                               created: __field13,
                                               created_utc: __field14,})
                                }
                            }
                        }
                        const FIELDS: &'static [&'static str] =
                            &["author", "body", "body_html", "context",
                              "first_message_name", "likes", "name",
                              "link_title", "parent_id", "replies", "subject",
                              "subreddit", "was_comment", "created",
                              "created_utc"];
                        deserializer.deserialize_struct("Message", FIELDS,
                                                        __Visitor::<__D>(::std::marker::PhantomData))
                    }
                }
            }
        };
}
use serde_json::Value;
/// A base structure that can represent both 'Thing' objects and 'Listing' objects, which both
/// return a `kind` and `data`.
#[derive(Debug)]
pub struct BasicThing<T> {
    /// An identifier that specifies the type of object that this is.
    /// The valid kinds are:
    /// - t1_ - Comment
    /// - t2_ - Account
    /// - t3_ - Link
    /// - t4_ - Message
    /// - t5_ - Subreddit
    /// - t6_ - Award
    /// - t8_ - PromoCampaign
    pub kind: String,
    /// The data contained by this struct. This will vary depending on the type parameter
    /// because each endpoint returns different contents.
    pub data: T,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_BasicThing: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl <T> _serde::de::Deserialize for BasicThing<T> where
         T: _serde::de::Deserialize {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<BasicThing<T>, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field { __field0, __field1, __ignore, }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "kind" => { Ok(__Field::__field0) }
                                        "data" => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"kind" => { Ok(__Field::__field0) }
                                        b"data" => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer,
                                     T>(::std::marker::PhantomData<__D>,
                                        ::std::marker::PhantomData<T>) where
                           T: _serde::de::Deserialize;
                    impl <__D: _serde::de::Deserializer, T>
                     _serde::de::Visitor for __Visitor<__D, T> where
                     T: _serde::de::Deserialize {
                        type
                        Value
                        =
                        BasicThing<T>;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<BasicThing<T>, __V::Error>
                         where __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: < T > (  ))
                                        {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(BasicThing{kind: __field0,
                                              data: __field1,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<BasicThing<T>, __V::Error>
                         where __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<String> = None;
                                let mut __field1: Option<T> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("kind"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("data"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: < T >
                                                          (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field ( "kind"
                                             )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field ( "data"
                                             )),
                                    };
                                Ok(BasicThing{kind: __field0,
                                              data: __field1,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] = &["kind", "data"];
                    deserializer.deserialize_struct("BasicThing", FIELDS,
                                                    __Visitor::<__D,
                                                                T>(::std::marker::PhantomData,
                                                                   ::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct ThingList {
    pub things: Vec<BasicThing<Value>>,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_ThingList: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for ThingList {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<ThingList, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field { __field0, __ignore, }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "things" => { Ok(__Field::__field0) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"things" => { Ok(__Field::__field0) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        ThingList;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<ThingList, __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: <
                                               Vec<BasicThing<Value>> > (  ))
                                        {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(ThingList{things: __field0,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<ThingList, __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0:
                                        Option<Vec<BasicThing<Value>>> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("things"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Vec<BasicThing<Value>>
                                                          > (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "things" )),
                                    };
                                Ok(ThingList{things: __field0,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] = &["things"];
                    deserializer.deserialize_struct("ThingList", FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct FlairSelectorResponse {
    pub current: CurrentFlairResponse,
    pub choices: Vec<FlairChoice>,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_FlairSelectorResponse: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for FlairSelectorResponse {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<FlairSelectorResponse, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field { __field0, __field1, __ignore, }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "current" => { Ok(__Field::__field0) }
                                        "choices" => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"current" => {
                                            Ok(__Field::__field0)
                                        }
                                        b"choices" => {
                                            Ok(__Field::__field1)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        FlairSelectorResponse;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         ->
                             ::std::result::Result<FlairSelectorResponse,
                                                   __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: <
                                               CurrentFlairResponse > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: <
                                               Vec<FlairChoice> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(FlairSelectorResponse{current: __field0,
                                                         choices: __field1,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         ->
                             ::std::result::Result<FlairSelectorResponse,
                                                   __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0:
                                        Option<CurrentFlairResponse> = None;
                                let mut __field1: Option<Vec<FlairChoice>> =
                                    None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("current"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          CurrentFlairResponse
                                                          > (  )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("choices"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Vec<FlairChoice> > (
                                                           )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "current" )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field (
                                             "choices" )),
                                    };
                                Ok(FlairSelectorResponse{current: __field0,
                                                         choices: __field1,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["current", "choices"];
                    deserializer.deserialize_struct("FlairSelectorResponse",
                                                    FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct FlairChoice {
    pub flair_css_class: String,
    pub flair_template_id: String,
    pub flair_text: String,
    pub flair_position: String,
    pub flair_text_editable: bool,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_FlairChoice: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for FlairChoice {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<FlairChoice, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __ignore,
                    }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        2usize => { Ok(__Field::__field2) }
                                        3usize => { Ok(__Field::__field3) }
                                        4usize => { Ok(__Field::__field4) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "flair_css_class" => {
                                            Ok(__Field::__field0)
                                        }
                                        "flair_template_id" => {
                                            Ok(__Field::__field1)
                                        }
                                        "flair_text" => {
                                            Ok(__Field::__field2)
                                        }
                                        "flair_position" => {
                                            Ok(__Field::__field3)
                                        }
                                        "flair_text_editable" => {
                                            Ok(__Field::__field4)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"flair_css_class" => {
                                            Ok(__Field::__field0)
                                        }
                                        b"flair_template_id" => {
                                            Ok(__Field::__field1)
                                        }
                                        b"flair_text" => {
                                            Ok(__Field::__field2)
                                        }
                                        b"flair_position" => {
                                            Ok(__Field::__field3)
                                        }
                                        b"flair_text_editable" => {
                                            Ok(__Field::__field4)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        FlairChoice;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<FlairChoice, __V::Error>
                         where __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                let __field2 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(2usize));
                                        }
                                    };
                                let __field3 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(3usize));
                                        }
                                    };
                                let __field4 =
                                    match try!(visitor . visit :: < bool > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(4usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(FlairChoice{flair_css_class: __field0,
                                               flair_template_id: __field1,
                                               flair_text: __field2,
                                               flair_position: __field3,
                                               flair_text_editable:
                                                   __field4,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<FlairChoice, __V::Error>
                         where __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<String> = None;
                                let mut __field1: Option<String> = None;
                                let mut __field2: Option<String> = None;
                                let mut __field3: Option<String> = None;
                                let mut __field4: Option<bool> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_css_class"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_template_id"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field2 => {
                                            if __field2.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_text"));
                                            }
                                            __field2 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field3 => {
                                            if __field3.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_position"));
                                            }
                                            __field3 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field4 => {
                                            if __field4.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_text_editable"));
                                            }
                                            __field4 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          bool > (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_css_class" )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_template_id" )),
                                    };
                                let __field2 =
                                    match __field2 {
                                        Some(__field2) => __field2,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_text" )),
                                    };
                                let __field3 =
                                    match __field3 {
                                        Some(__field3) => __field3,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_position" )),
                                    };
                                let __field4 =
                                    match __field4 {
                                        Some(__field4) => __field4,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_text_editable" )),
                                    };
                                Ok(FlairChoice{flair_css_class: __field0,
                                               flair_template_id: __field1,
                                               flair_text: __field2,
                                               flair_position: __field3,
                                               flair_text_editable:
                                                   __field4,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["flair_css_class", "flair_template_id",
                          "flair_text", "flair_position",
                          "flair_text_editable"];
                    deserializer.deserialize_struct("FlairChoice", FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct CurrentFlairResponse {
    pub flair_css_class: Option<String>,
    pub flair_template_id: Option<String>,
    pub flair_text: Option<String>,
    pub flair_position: Option<String>,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_CurrentFlairResponse: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for CurrentFlairResponse {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<CurrentFlairResponse, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __ignore,
                    }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        2usize => { Ok(__Field::__field2) }
                                        3usize => { Ok(__Field::__field3) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "flair_css_class" => {
                                            Ok(__Field::__field0)
                                        }
                                        "flair_template_id" => {
                                            Ok(__Field::__field1)
                                        }
                                        "flair_text" => {
                                            Ok(__Field::__field2)
                                        }
                                        "flair_position" => {
                                            Ok(__Field::__field3)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"flair_css_class" => {
                                            Ok(__Field::__field0)
                                        }
                                        b"flair_template_id" => {
                                            Ok(__Field::__field1)
                                        }
                                        b"flair_text" => {
                                            Ok(__Field::__field2)
                                        }
                                        b"flair_position" => {
                                            Ok(__Field::__field3)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        CurrentFlairResponse;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         ->
                             ::std::result::Result<CurrentFlairResponse,
                                                   __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                let __field2 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(2usize));
                                        }
                                    };
                                let __field3 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(3usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(CurrentFlairResponse{flair_css_class:
                                                            __field0,
                                                        flair_template_id:
                                                            __field1,
                                                        flair_text: __field2,
                                                        flair_position:
                                                            __field3,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         ->
                             ::std::result::Result<CurrentFlairResponse,
                                                   __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<Option<String>> =
                                    None;
                                let mut __field1: Option<Option<String>> =
                                    None;
                                let mut __field2: Option<Option<String>> =
                                    None;
                                let mut __field3: Option<Option<String>> =
                                    None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_css_class"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_template_id"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field2 => {
                                            if __field2.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_text"));
                                            }
                                            __field2 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field3 => {
                                            if __field3.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("flair_position"));
                                            }
                                            __field3 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_css_class" )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_template_id" )),
                                    };
                                let __field2 =
                                    match __field2 {
                                        Some(__field2) => __field2,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_text" )),
                                    };
                                let __field3 =
                                    match __field3 {
                                        Some(__field3) => __field3,
                                        None =>
                                        try!(visitor . missing_field (
                                             "flair_position" )),
                                    };
                                Ok(CurrentFlairResponse{flair_css_class:
                                                            __field0,
                                                        flair_template_id:
                                                            __field1,
                                                        flair_text: __field2,
                                                        flair_position:
                                                            __field3,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["flair_css_class", "flair_template_id",
                          "flair_text", "flair_position"];
                    deserializer.deserialize_struct("CurrentFlairResponse",
                                                    FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
