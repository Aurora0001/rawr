var searchIndex = {};
searchIndex["rawr"] = {"doc":"# rawr - Rust API Wrapper for Reddit\nThis crate provides simple yet powerful access to the Reddit API.\n## Quick Start\nThis section will teach you the basics of `rawr`, so you can get started with your project\neasily.\n### Creating a Client\nTo create a client to access the Reddit API, you can use the `RedditClient` class. All you need\nto do is pass in the user agent when creating the client to have anonymous access. In order\nto post or reply, you need to log in (which will be explained soon!).","items":[[0,"auth","rawr","Whenever you create a `RedditClient`, you need to provide an `Authenticator` that can\nlog in for you and send credentials with every request. Reddit&#39;s API provides multiple\nways to authenticate, and it&#39;s important that you use the correct one for your application\nso that you only take passwords where necessary.\n# OAuth Or Not?\nIn effect, Reddit&#39;s API is split into two parts: a deprecated API that uses cookies for\nauthentication, and an OAuth API that is recommended for new applications. Clients that use\nOAuth-based authenticators have a higher rate limit (60/min for OAuth, 30/min for cookie), so\nit may be preferable to use OAuth if larger batches of data are being processed from the API.\n# Authenticator Summary\n- `AnonymousAuthenticator` - uses the legacy API (so it has a lower rate limit) but requires\nno credentials at all. Choose this if you just want to **browse the API without registering**.\n- `PasswordAuthenticator` - uses the OAuth API (so higher rate limits), but requires a\nregistered account and registration on the &#39;apps&#39; page (see below). Choose this for **bots**\nor scripts that use lots of data.",null,null],[3,"AnonymousAuthenticator","rawr::auth","An anonymous login authenticator.",null,null],[3,"PasswordAuthenticator","","Authenticates using a username and password with OAuth. See the module-level documentation for\nusage.",null,null],[8,"Authenticator","","Trait for any method of authenticating with the Reddit API.",null,null],[10,"login","","Logs in and fetches relevant tokens.",0,null],[11,"refresh_token","","Called if a token expiration error occurs.",0,null],[10,"logout","","Logs out and invalidates tokens if applicable.",0,null],[10,"scopes","","A list of OAuth scopes that this `Authenticator` can access. Currently, the result of this\nis not used, but the correct scopes should be returned. If all scopes can be accessed,\nthis is signified by a vec![&quot;*&quot;]. If it is read-only, the result is vec![&quot;read&quot;].",0,null],[10,"headers","","Returns the headers needed to authenticate. Must be done **after** `login()`.",0,null],[10,"oauth","","`true` if this authentication method requires the OAuth API.",0,null],[11,"login","","",1,null],[11,"logout","","",1,null],[11,"scopes","","",1,null],[11,"headers","","",1,null],[11,"oauth","","",1,null],[11,"new","","Creates a new `AnonymousAuthenticator`. See the module-level documentation for the purpose\nof `AnonymousAuthenticator`.\n# Examples\n```\nuse rawr::auth::AnonymousAuthenticator;\nAnonymousAuthenticator::new();\n```",1,{"inputs":[],"output":{"name":"arc"}}],[11,"login","","",2,null],[11,"logout","","",2,null],[11,"scopes","","",2,null],[11,"headers","","",2,null],[11,"oauth","","",2,null],[11,"new","","Creates a new `PasswordAuthenticator`. If you do not have a client ID and secret (or do\nnot know what these are), you need to fetch one using the instructions in the module\ndocumentation.",2,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"arc"}}],[0,"client","rawr","A client that represents one connection to the Reddit API. This can log in to one account\nor remain anonymous, and performs all interactions with the Reddit API.\n# Examples\n## Creating a RedditClient\nWhen creating a `RedditClient`, you are only required to pass in a user agent string, which will\nidentify your client. The user agent should identify your program, but does not need to\nbe unique to this particular machine - you should use one user agent for each version of\nyour program. You **must** use a descriptive user agent when creating the client to comply\nwith Reddit API rules.",null,null],[3,"RedditClient","rawr::client","A client to connect to Reddit. See the module-level documentation for examples.",null,null],[12,"client","","The internal HTTP client. You should not need to manually use this. If you do, file an\nissue saying why the API does not support your use-case, and we&#39;ll try to add it.",3,null],[11,"new","","Creates an instance of the `RedditClient` using the provided user agent.",3,{"inputs":[{"name":"str"},{"name":"arc"}],"output":{"name":"redditclient"}}],[11,"set_auto_logout","","Disables the automatic logout that occurs when the client drops out of scope.\nIn the case of OAuth, it will prevent your access token or refresh token from being\nrevoked, though they may expire anyway.",3,null],[11,"ensure_authenticated","","Runs the lambda passed in. Refreshes the access token if it fails due to an HTTP 401\nUnauthorized error, then reruns the lambda. If the lambda fails twice, or fails due to\na different error, the error is returned.",3,null],[11,"get_authenticator","","Gets a mutable reference to the authenticator using a `&amp;RedditClient`. Mainly used\nin the `ensure_authenticated` method to update tokens if necessary.",3,null],[11,"subreddit","","Provides an interface to the specified subreddit which can be used to access\nsubreddit-related API endpoints such as post listings.",3,null],[11,"user","","Gets the specified user in order to get user-related data such as the &#39;about&#39; page.",3,null],[11,"build_url","","Creates a full URL using the correct access point (API or OAuth) from the stem.",3,null],[11,"get","","Wrapper around the `get` function of `hyper::client::Client`, which sends a HTTP GET\nrequest. The correct user agent header is also sent using this function, which is necessary\nto prevent 403 errors.",3,null],[11,"get_json","","Sends a GET request with the specified parameters, and returns the resulting\ndeserialized object.",3,null],[11,"post","","Wrapper around the `post` function of `hyper::client::Client`, which sends a HTTP POST\nrequest. The correct user agent header is also sent using this function, which is necessary\nto prevent 403 errors.",3,null],[11,"post_json","","Sends a post request with the specified parameters, and converts the resulting JSON\ninto a deserialized object.",3,null],[11,"post_success","","Sends a post request with the specified parameters, and ensures that the response\nhas a success header (HTTP 2xx).",3,null],[11,"url_escape","","URL encodes the specified string so that it can be sent in GET and POST requests.",3,null],[11,"get_by_id","","Gets a `LazySubmission` object which can be used to access the information/comments of a\nspecified post. The **full** name of the item should be used.\n# Examples\n```\nuse rawr::prelude::*;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet post = client.get_by_id(&quot;t3_4uule8&quot;).get().expect(&quot;Could not get post.&quot;);\nassert_eq!(post.title(), &quot;[C#] Abstract vs Interface&quot;);\n```",3,null],[11,"messages","","Gets a `MessageInterface` object which allows access to the message listings (e.g. `inbox`,\n`unread`, etc.)\n# Examples\n```rust,no_run\nuse rawr::prelude::*;\nlet client = RedditClient::new(&quot;rawr&quot;, PasswordAuthenticator::new(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));\nlet messages = client.messages();\nfor message in messages.unread(ListingOptions::default()) {",3,null],[11,"drop","","",3,null],[0,"responses","rawr","Deserialized API responses.",null,null],[3,"BasicThing","rawr::responses","A base structure that can represent both &#39;Thing&#39; objects and &#39;Listing&#39; objects, which both\nreturn a `kind` and `data`.",null,null],[12,"kind","","An identifier that specifies the type of object that this is.\nThe valid kinds are:\n- t1_ - Comment\n- t2_ - Account\n- t3_ - Link\n- t4_ - Message\n- t5_ - Subreddit\n- t6_ - Award\n- t8_ - PromoCampaign",4,null],[12,"data","","The data contained by this struct. This will vary depending on the type parameter\nbecause each endpoint returns different contents.",4,null],[3,"ThingList","","",null,null],[12,"things","","",5,null],[3,"FlairSelectorResponse","","",null,null],[12,"current","","",6,null],[12,"choices","","",6,null],[3,"FlairChoice","","",null,null],[12,"flair_css_class","","",7,null],[12,"flair_template_id","","",7,null],[12,"flair_text","","",7,null],[12,"flair_position","","",7,null],[12,"flair_text_editable","","",7,null],[3,"CurrentFlairResponse","","",null,null],[12,"flair_css_class","","",8,null],[12,"flair_template_id","","",8,null],[12,"flair_text","","",8,null],[12,"flair_position","","",8,null],[0,"listing","","",null,null],[3,"SubredditAboutData","rawr::responses::listing","",null,null],[12,"subscribers","","",9,null],[12,"accounts_active","","",9,null],[12,"subreddit_type","","",9,null],[12,"title","","",9,null],[12,"url","","",9,null],[12,"wiki_enabled","","",9,null],[12,"over18","","",9,null],[12,"public_description","","",9,null],[12,"public_description_html","","",9,null],[12,"public_traffic","","",9,null],[12,"name","","",9,null],[12,"id","","",9,null],[12,"display_name","","",9,null],[12,"description","","",9,null],[12,"description_html","","",9,null],[12,"created","","",9,null],[12,"created_utc","","",9,null],[12,"quarantine","","",9,null],[12,"submission_type","","",9,null],[12,"lang","","",9,null],[12,"submit_text","","",9,null],[12,"submit_text_html","","",9,null],[12,"submit_text_label","","",9,null],[12,"submit_link_label","","",9,null],[12,"comment_score_hide_mins","","",9,null],[3,"ListingData","","The contents of a call to a &#39;listing&#39; endpoint.",null,null],[12,"modhash","","A modhash (essentially a CSRF token) generated for this request. This is generally\nnot required for any use-case, but is provided nevertheless.",10,null],[12,"before","","",10,null],[12,"after","","",10,null],[12,"children","","",10,null],[3,"Submission","","Represents all types of link posts and self posts on Reddit.",null,null],[12,"domain","","The domain of the link (if link post) or self.subreddit (if self post).\nDomains do not include a protocol, e.g. `i.redd.it` or `self.learnprogramming`",11,null],[12,"banned_by","","Contains the name of the moderator who banned this, if the logged-in user is a moderator\nof this subreddit and this is banned.",11,null],[12,"subreddit","","The subreddit that this submission was posted in (not including `/r/`)",11,null],[12,"selftext_html","","If this is a self post, it contains the HTML of the post body. Otherwise, it is `None`.",11,null],[12,"selftext","","The self text in **Markdown** format, if this is a self post. Unlike `selftext_html`, this\nis an **empty string** if this is a link post.",11,null],[12,"likes","","This is `Some(true)` if the logged-in user has upvoted this submission, `Some(false)` if\nthe user has downvoted this submission or `None` if the user has not voted.",11,null],[12,"suggested_sort","","If a specifc sort method is suggested, this is set to the string name of it, otherwise\nit is `None`.\n# Possible values\n- top\n- new\n- controversial\n- old\n- qa\n- confidence",11,null],[12,"link_flair_text","","If this post is flaired, this set to `Some(FLAIR TEXT)`. Otherwise, it is `None`.\nLink flairs **can** be empty strings.",11,null],[12,"id","","The ID of the post in base-36 form, as used in Reddit&#39;s links.",11,null],[12,"gilded","","The amount of times that a user has been gilded (gifted Reddit Gold).",11,null],[12,"archived","","This is `true` if Reddit has archived the submission (usually done after 6 months).\nArchived submissions cannot be voted or commented upon.",11,null],[12,"clicked","","This is `true` if the logged-in user has already followed this link, otherwise `false`.",11,null],[12,"author","","The name of the author of the submission (not including the leading `/u/`)",11,null],[12,"score","","The overall points score of this post, as shown on the upvote counter. This is the\nsame as upvotes - downvotes (however, this figure may be fuzzed by Reddit, and may not\nbe exact)",11,null],[12,"approved_by","","This contains the name of the user who approved this submission. This is `None` unless\nyou are a mod of the subreddit **and** a user has approved this post.",11,null],[12,"over_18","","This is `true` if the &#39;nsfw&#39; option has been selected for this submission.",11,null],[12,"hidden","","This is `true` if the logged-in user has clicked &#39;hide&#39; on this post.",11,null],[12,"num_comments","","The number of comment replies to this submission.",11,null],[12,"thumbnail","","The URL to the link thumbnail. This is &quot;self&quot; if this is a self post, or &quot;default&quot; if\na thumbnail is not available.",11,null],[12,"subreddit_id","","The Reddit ID for the subreddit where this was posted, **including the leading `t5_`**.",11,null],[12,"hide_score","","This is `true` if the score is being hidden.",11,null],[12,"edited","","This is `false` if the submission is not edited and is the edit timestamp if it is edited.\nAccess through the functions of `Submission` instead.",11,null],[12,"link_flair_css_class","","The CSS class set for the link&#39;s flair (if available), otherwise `None`.",11,null],[12,"author_flair_css_class","","The CSS class set for the author&#39;s flair (if available). If there is no flair, this is\n`None`.",11,null],[12,"downs","","The number of downvotes (fuzzed; see `score` for further explanation)",11,null],[12,"ups","","The number of upvotes (fuzzed; see `score` for further explanation)",11,null],[12,"saved","","True if the logged-in user has saved this submission.",11,null],[12,"removal_reason","","The reason for the post removal, if you are a moderator **and** this post has been\nremoved.",11,null],[12,"stickied","","This is `true` if this submission is stickied (an &#39;annoucement&#39; thread)",11,null],[12,"is_self","","This is `true` if this is a self post.",11,null],[12,"permalink","","The permanent, long link for this submission.",11,null],[12,"locked","","This is `true` if the submission has been locked by a moderator, and no replies can be\nmade.",11,null],[12,"name","","The full &#39;Thing ID&#39;, consisting of a &#39;kind&#39; and a base-36 identifier. The valid kinds are:\n- t1_ - Comment\n- t2_ - Account\n- t3_ - Link\n- t4_ - Message\n- t5_ - Subreddit\n- t6_ - Award\n- t8_ - PromoCampaign",11,null],[12,"created","","A timestamp of the time when the post was created, in the logged-in user&#39;s **local**\ntime.",11,null],[12,"url","","The linked URL, if this is a link post.",11,null],[12,"author_flair_text","","The text of the author&#39;s flair, if present. Can be an empty string if the flair is present\nbut contains no text.",11,null],[12,"quarantine","","This is `true` if the post is from a quarantined subreddit.",11,null],[12,"title","","The title of the post.",11,null],[12,"created_utc","","A timestamp of the time when the post was created, in **UTC**.",11,null],[12,"distinguished","","Indicates whether the user has used a special flag for themselves, e.g. [M] or [A].\nPossible values:\n- None - Normal user\n- Some(&quot;moderator&quot;) - [M]\n- Some(&quot;admin&quot;) - [A]\n- Some(&quot;special&quot;) - other special &#39;distinguishes&#39; e.g. [Δ]",11,null],[12,"visited","","This is `true` if the user has visited this link.",11,null],[12,"num_reports","","The number of reports, if the user is a moderator of this subreddit.",11,null],[6,"Listing","","The &#39;listing&#39; format returned by the Reddit API for post lists.",null,null],[6,"CommentResponse","","The structure returned by the Reddit API for comments, consisting of the original post\nand a listing of the comments.",null,null],[6,"SubredditAbout","","API response from /r/subreddit/about",null,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[0,"auth","rawr::responses","",null,null],[3,"TokenResponse","rawr::responses::auth","A response providing an access token from /api/v1/access_token which can be used for the\nOAuth-based authenticators",null,null],[12,"access_token","","",12,null],[12,"expires_in","","",12,null],[12,"scope","","",12,null],[12,"token_type","","",12,null],[11,"fmt","","",12,null],[0,"comment","rawr::responses","",null,null],[3,"Comment","rawr::responses::comment","A deserializable structure representing a comment. This is created when the client returns\nJSON representing a comment and this is wrapped in a `models::comment::Comment` for\nease-of-use.",null,null],[12,"subreddit_id","","The Reddit ID for the subreddit where this was posted, **including the leading `t5_`**.",13,null],[12,"banned_by","","Contains the name of the moderator who banned this, if the logged-in user is a moderator\nof this subreddit and this is banned.",13,null],[12,"removal_reason","","The reason for the post removal, if you are a moderator **and** this post has been\nremoved.",13,null],[12,"link_id","","The ID (including kind) of the parent post (i.e. the link post or self post).",13,null],[12,"likes","","This is `Some(true)` if the logged-in user has upvoted this submission, `Some(false)` if\nthe user has downvoted this submission or `None` if the user has not voted.",13,null],[12,"replies","","A listing of replies to this comment. Do not access this directly - use the functions\nof `Comment` instead.",13,null],[12,"saved","","True if the logged-in user has saved this submission.",13,null],[12,"id","","The ID of the post in base-36 form, as used in Reddit&#39;s links.",13,null],[12,"gilded","","The amount of times that a user has been gilded (gifted Reddit Gold).",13,null],[12,"archived","","This is `true` if Reddit has archived the submission (usually done after 6 months).\nArchived submissions cannot be voted or commented upon.",13,null],[12,"author","","The name of the author of the submission (not including the leading `/u/`)",13,null],[12,"score","","The overall points score of this post, as shown on the upvote counter. This is the\nsame as upvotes - downvotes (however, this figure may be fuzzed by Reddit, and may not\nbe exact)",13,null],[12,"approved_by","","This contains the name of the user who approved this submission. This is `None` unless\nyou are a mod of the subreddit **and** a user has approved this post.",13,null],[12,"body","","The main post text.",13,null],[12,"edited","","This is `false` if the submission is not edited and is the edit timestamp if it is edited.\nAccess through the functions of `Submission` instead.",13,null],[12,"author_flair_css_class","","The CSS class set for the author&#39;s flair (if available). If there is no flair, this is\n`None`.",13,null],[12,"downs","","The number of downvotes (fuzzed; see `score` for further explanation)",13,null],[12,"ups","","The number of upvotes (fuzzed; see `score` for further explanation)",13,null],[12,"body_html","","Contains the HTML of the post body.",13,null],[12,"subreddit","","The subreddit that this submission was posted in (not including `/r/`)",13,null],[12,"name","","The full &#39;Thing ID&#39;, consisting of a &#39;kind&#39; and a base-36 identifier. The valid kinds are:\n- t1_ - Comment\n- t2_ - Account\n- t3_ - Link\n- t4_ - Message\n- t5_ - Subreddit\n- t6_ - Award\n- t8_ - PromoCampaign",13,null],[12,"score_hidden","","`true` if the score should not be displayed.",13,null],[12,"stickied","","This is `true` if this submission is stickied (an &#39;annoucement&#39; thread)",13,null],[12,"created","","A timestamp of the time when the post was created, in the logged-in user&#39;s **local**\ntime.",13,null],[12,"author_flair_text","","The text of the author&#39;s flair, if present. Can be an empty string if the flair is present\nbut contains no text.",13,null],[12,"created_utc","","A timestamp of the time when the post was created, in **UTC**.",13,null],[12,"distinguished","","Indicates whether the user has used a special flag for themselves, e.g. [M] or [A].\nPossible values:\n- None - Normal user\n- Some(&quot;moderator&quot;) - [M]\n- Some(&quot;admin&quot;) - [A]\n- Some(&quot;special&quot;) - other special &#39;distinguishes&#39; e.g. [Δ]",13,null],[12,"num_reports","","",13,null],[12,"parent_id","","",13,null],[3,"More","","",null,null],[12,"count","","",14,null],[12,"parent_id","","",14,null],[12,"children","","",14,null],[3,"MoreComments","","",null,null],[12,"json","","",15,null],[3,"MoreCommentsInner","","",null,null],[12,"errors","","",16,null],[12,"data","","",16,null],[6,"CommentListing","","The &#39;listing&#39; format for comments.",null,null],[11,"fmt","","",13,null],[11,"fmt","","",14,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[0,"user","rawr::responses","",null,null],[3,"UserAboutData","rawr::responses::user","",null,null],[12,"name","","",17,null],[12,"is_friend","","",17,null],[12,"hide_from_robots","","",17,null],[12,"id","","",17,null],[12,"created","","",17,null],[12,"created_utc","","",17,null],[12,"link_karma","","",17,null],[12,"comment_karma","","",17,null],[12,"is_gold","","",17,null],[12,"is_mod","","",17,null],[12,"has_verified_email","","",17,null],[6,"UserAbout","","API response for /user/username/about",null,null],[11,"fmt","","",17,null],[0,"messages","rawr::responses","",null,null],[3,"Message","rawr::responses::messages","",null,null],[12,"author","","",18,null],[12,"body","","",18,null],[12,"body_html","","",18,null],[12,"context","","",18,null],[12,"first_message_name","","",18,null],[12,"likes","","",18,null],[12,"name","","",18,null],[12,"link_title","","",18,null],[12,"parent_id","","",18,null],[12,"replies","","",18,null],[12,"subject","","",18,null],[12,"subreddit","","",18,null],[12,"was_comment","","",18,null],[12,"created","","",18,null],[12,"created_utc","","",18,null],[6,"MessageListing","","",null,null],[11,"fmt","","",18,null],[11,"fmt","rawr::responses","",4,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[0,"traits","rawr","Traits for common API functionality.",null,null],[8,"Votable","rawr::traits","An object that can be voted upon and has a score based on the upvotes - downvotes.\n## Notes\nThe `ups` and `downs` values from the API no longer represent the true upvotes and downvotes,\nso this trait does not expose them.",null,null],[10,"score","","The (fuzzed) points score of the object.",19,null],[10,"likes","","Indicates the logged-in user&#39;s current vote on this object:\n- Some(true) = Upvoted\n- Some(false) = Downvoted\n- None = No vote",19,null],[10,"upvote","","Upvotes the specified post, if possible.",19,null],[10,"downvote","","Downvotes the specified post, if possible.",19,null],[10,"cancel_vote","","Removes the vote on the specified post, if possible.",19,null],[8,"PageListing","","A paginatable listing.",null,null],[10,"before","","The ID to use for anchoring when paginating to the previous page.",20,null],[10,"after","","The ID to use for anchoring when paginating to the next page.",20,null],[10,"modhash","","The modhash (CSRF token) sent with this listing. Largely redundant, since the main\nmodhash can be used.",20,null],[8,"Created","","An object that was created at some point (e.g. a subreddit, a submission or a comment)",null,null],[10,"created","","The timestamp of the time when the post was created, as would be shown to the logged-in\nuser.",21,null],[10,"created_utc","","The timestamp of post creation, in UTC.",21,null],[8,"Editable","","An object that can be edited (anything that has a body).",null,null],[10,"edited","","`true` if edited, otherwise `false`.",22,null],[10,"edited_time","","Returns `Some(edited timestamp in logged-in user&#39;s time zone)` if edited, otherwise `None`.",22,null],[10,"edit","","Edits the specified post (if possible) with the new text (in **Markdown** format)",22,null],[10,"body","","Gets the body of a comment or message or the self text of a post, if available.\nIn the case of link posts, this will be `None`.",22,null],[10,"body_html","","Gets the comment/message body HTML or self text HTML if available.",22,null],[8,"Content","","An object that was created by an author and is in a subreddit (i.e. a submission or comment)",null,null],[10,"author","","The author of the object.",23,null],[10,"author_flair_text","","The flair text of the user flair, if present.",23,null],[10,"author_flair_css","","The flair CSS class of the user flair, if present.",23,null],[10,"subreddit","","For submissions (link/self posts), this is the subreddit where it was posted. For comments,\nthis is the subreddit of the parent submission.",23,null],[10,"delete","","Deletes the specified object, if possible. **This may be irreversible. Use with caution.**",23,null],[10,"name","","Gets the full ID of this comment (kind + id)",23,null],[8,"Commentable","","An object that can be commented upon and may have comments.",null,null],[10,"reply_count","","The number of comments on this object. Prefer this to `replies().count()`.",24,null],[10,"reply","","Sends a reply with the specified body.",24,null],[10,"replies","","Gets all replies as a self-paginating `CommentList`, which can be iterated through as\nnecessary. Comments cannot be batched like submission listings, so there may be\nmultiple requests on large threads to get all comments.",24,null],[8,"Stickable","","An object that can be stickied (made into an &#39;annoucement post&#39;). In practice, this is only\nself/link posts.",null,null],[10,"stickied","","Returns the **current** sticky state of the submission.",25,null],[10,"stick","","Makes the selected post a sticky, provided that you have the correct privileges.\nFor comments, this will also distinguish the post as [M].",25,null],[10,"unstick","","Makes this sticky post a normal post, provided that you have the correct privileges.\nFor comments, this will also remove the [M] distinguish.",25,null],[11,"toggle_sticky","","Toggles the sticky state (i.e. becomes sticky if it is not one, and becomes normal if it\nis a sticky)",25,null],[8,"Lockable","","An object that can be locked so that no further comments can be added.",null,null],[10,"locked","","Returns the **current** locked state of the submission.",26,null],[10,"lock","","Locks the current submission, provided you have the correct privileges.",26,null],[10,"unlock","","Unlocks the current submission, provided you have the correct privileges.",26,null],[11,"toggle_lock","","Toggles the lock state (locks if unlocked, unlocks if locked).",26,null],[8,"Reportable","","An object that can be reported (submission, comment, private message). Also exposes moderation\noptions to review reports.",null,null],[10,"report","","Reports the object for the specified reason (must be less than 100 characters).",27,null],[10,"report_count","","Gets the number of reports for this post. If you do not have the rights to view this value,\nthis will return `None`.",27,null],[8,"Flairable","","An object that has a flair and can be given a flair by the creator or a moderator.",null,null],[10,"get_flair_text","","Gets the current flair text, if present.",28,null],[10,"get_flair_css","","Gets the current CSS class of the flair, if present.",28,null],[10,"flair_options","","Tries to fetch the flair options for this item. If you do not have the privileges to add\na flair to this (i.e. not moderator or author), this will give an\n`APIError::HTTPError(Forbidden)`.",28,null],[10,"flair","","Sets the flair for this post, if possible. The `template` parameter is the\n`FlairChoice.flair_template_id` field. The template will also be returned if using\n`FlairList.find_text`. This may fail with `APIError::HTTPError(Forbidden)` if you are\nnot authorized to do this.",28,null],[8,"Visible","","An object that can be shown/hidden in listings.",null,null],[10,"hidden","","Gets the current visibility state of the ooject.",29,null],[10,"hide","","Hides the object, so it is not shown in listings. May be useful so that bots do not\nview the same links multiple times.",29,null],[10,"show","","Shows the object again, so it **is** visible in listings.",29,null],[11,"toggle_hidden","","Hides the object if visible, and shows it if hidden.",29,null],[8,"Distinguishable","","An object that can be distinguished (moderator/admin/special indicator).",null,null],[10,"distinguished","","Indicates whether the user has used a special flag for themselves, e.g. [M] or [A].\nPossible values:",30,null],[10,"distinguish","","Sets the post to have a [M] distinguish.",30,null],[10,"undistinguish","","Removes any distinguish on the comment. This will also unsticky a comment, if it is\nstickied.",30,null],[11,"toggle_distinguish","","Distinguishes if undistinguished, and vice versa.",30,null],[0,"errors","rawr","Error types used to signal problems with requests.",null,null],[4,"APIError","rawr::errors","Error type that occurs when an API request fails for some reason.",null,null],[13,"ExhaustedListing","","Occurs when a listing has run out of results. Only used internally - the `Listing` class\nwill not raise this when iterating.",31,null],[13,"HTTPError","","Occurs when the API has returned a non-success error code. Important status codes include:\n- 401 Unauthorized - this usually occurs if your tokens are incorrect or invalid\n- 403 Forbidden - you are not allowed to access this, but your request was valid.",31,null],[13,"HyperError","","Occurs if the HTTP response from Reddit was corrupt and Hyper could not parse it.",31,null],[13,"JSONError","","Occurs if JSON deserialization fails. This will always be a bug, so please report it\nif it does occur, but the error type is provided so you can fail gracefully.",31,null],[11,"fmt","","",31,null],[11,"fmt","","",31,null],[11,"description","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"apierror"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"apierror"}}],[0,"structures","rawr","Reddit structures such as submissions, comments and subreddits.",null,null],[0,"comment","rawr::structures","Comment that represents a reply to a submission (or another comment).",null,null],[3,"Comment","rawr::structures::comment","Structure representing a comment and its associated data (e.g. replies)",null,null],[11,"score","","",32,null],[11,"likes","","",32,null],[11,"upvote","","",32,null],[11,"downvote","","",32,null],[11,"cancel_vote","","",32,null],[11,"created","","",32,null],[11,"created_utc","","",32,null],[11,"edited","","",32,null],[11,"edited_time","","",32,null],[11,"edit","","",32,null],[11,"body","","",32,null],[11,"body_html","","",32,null],[11,"author","","",32,null],[11,"author_flair_text","","",32,null],[11,"author_flair_css","","",32,null],[11,"subreddit","","",32,null],[11,"delete","","",32,null],[11,"name","","",32,null],[11,"reply_count","","",32,null],[11,"reply","","",32,null],[11,"replies","","",32,null],[11,"new","","Internal method. Use `Submission.replies()` or `Comment.replies()` to get a listing, then\nselect the desired comment instead.",32,{"inputs":[{"name":"redditclient"},{"name":"_comment"}],"output":{"name":"comment"}}],[11,"parent","","Gets the full ID of the parent submission/comment (kind + id e.g. &#39;t1_4te6jf&#39;)",32,null],[11,"add_reply","","Adds a reply to this comment&#39;s reply list. This is an internal method - to make the client\nreply to this post, use `Comment.reply(MESSAGE)`.",32,null],[11,"report","","",32,null],[11,"report_count","","",32,null],[11,"stickied","","",32,null],[11,"stick","","",32,null],[11,"unstick","","",32,null],[11,"distinguished","","",32,null],[11,"distinguish","","",32,null],[11,"undistinguish","","",32,null],[0,"submission","rawr::structures","Structure representing a link post or self post (a submission).",null,null],[3,"Submission","rawr::structures::submission","Structure representing a link post or self post (a submission) on Reddit.",null,null],[3,"FlairList","","A list of flairs that can be assigned to a post. To access the complete list, use\n`FlairList.flairs`, which is a list of `FlairChoice` objects.",null,null],[12,"flairs","","The list of flairs available.",33,null],[3,"LazySubmission","","A lazy object representing a submission. Used by the `Client.get_by_id()` method until the\ndata is specified by the user (we don&#39;t know if they want the `Submission` or `CommentList`\nyet). The `LazySubmission` object is consumed when performing either of these actions.",null,null],[11,"eq","","",34,null],[11,"score","","",34,null],[11,"likes","","",34,null],[11,"upvote","","",34,null],[11,"downvote","","",34,null],[11,"cancel_vote","","",34,null],[11,"created","","",34,null],[11,"created_utc","","",34,null],[11,"edited","","",34,null],[11,"edited_time","","",34,null],[11,"edit","","",34,null],[11,"body","","",34,null],[11,"body_html","","",34,null],[11,"author","","",34,null],[11,"author_flair_text","","",34,null],[11,"author_flair_css","","",34,null],[11,"subreddit","","",34,null],[11,"delete","","",34,null],[11,"name","","",34,null],[11,"reply_count","","",34,null],[11,"reply","","",34,null],[11,"replies","","",34,null],[11,"new","","Internal method. Get submissions from a listing instead (see `Subreddit.hot()` etc.)",34,{"inputs":[{"name":"redditclient"},{"name":"submission"}],"output":{"name":"submission"}}],[11,"reply_stream","","Returns a `CommentStream` that fetches the latest comments in an infinite loop and returns\nit from the iterator. Comments will be ordered from oldest to newest, with up to 5 comments\nthat exist being yielded at a time. This will poll the API every 5 seconds for updates.\n# Examples\n```rust,no_run\nuse rawr::prelude::*;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet sub = client.subreddit(&quot;all&quot;);\nlet mut listing = sub.hot(ListingOptions::default()).expect(&quot;Could not fetch listing!&quot;);\nlet post = listing.nth(0).unwrap();\nfor comment in post.reply_stream() {\n    println!(&quot;New comment received!&quot;);\n}",34,null],[11,"title","","The title of the post (as an &amp;str). All link and self posts have a title, and any post\nflairs are not included in this.",34,null],[11,"is_self_post","","This is `true` if the post is a self post, and `false` if it is a link post.",34,null],[11,"link_url","","Gets the URL linked to by this link post (or `None`, if this is a self post)",34,null],[11,"nsfw","","Returns `true` if the post is marked NSFW (over 18).",34,null],[11,"mark_nsfw","","Sets the post as NSFW (over 18) if you have the correct privileges (owner of the post or\nmoderator) **and** the subreddit allows NSFW posts.",34,null],[11,"unmark_nsfw","","Sets the post as **not** NSFW (over 18).",34,null],[11,"stickied","","This is `true` if the post is stickied (an announcement post).",34,null],[11,"stick","","",34,null],[11,"unstick","","",34,null],[11,"locked","","",34,null],[11,"lock","","",34,null],[11,"unlock","","",34,null],[11,"report","","",34,null],[11,"report_count","","",34,null],[11,"distinguished","","",34,null],[11,"distinguish","","",34,null],[11,"undistinguish","","",34,null],[11,"get_flair_text","","",34,null],[11,"get_flair_css","","",34,null],[11,"flair_options","","",34,null],[11,"flair","","",34,null],[11,"hidden","","",34,null],[11,"hide","","",34,null],[11,"show","","",34,null],[11,"new","","Creates a `FlairList` from a vector of `FlairChoice` objects.",33,{"inputs":[{"name":"vec"}],"output":{"name":"flairlist"}}],[11,"find_text","","Finds the flair with the specified text, consuming the `FlairList`.\n# Examples\n```rust,no_run\nuse rawr::client::RedditClient;\nuse rawr::auth::PasswordAuthenticator;\nuse rawr::options::ListingOptions;\nuse rawr::traits::Flairable;\nlet client = RedditClient::new(&quot;rawr&quot;, PasswordAuthenticator::new(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));\nlet sub = client.subreddit(&quot;learnprogramming&quot;);\nlet post = sub.hot(ListingOptions::default()).unwrap().next().unwrap();\n// NOTE: this would 403 unless you are a moderator or the creator of the post.\nlet tutorial_flair = post.flair_options().unwrap().find_text(&quot;tutorial&quot;).unwrap();\npost.flair(&amp;tutorial_flair);\n```",33,null],[11,"new","","Internal method. Use `Client.get_by_id()` instead.",35,{"inputs":[{"name":"redditclient"},{"name":"str"}],"output":{"name":"lazysubmission"}}],[11,"get","","Fetches the `Submission` with this ID, in order to access post title, body, link and\ncreation time.",35,null],[11,"replies","","Fetches a `CommentList` with replies to this submission.",35,null],[0,"comment_list","rawr::structures","Paginated list of comments.",null,null],[3,"CommentList","rawr::structures::comment_list","A list of comments that can be iterated through. Automatically fetches &#39;more&#39; links when\nnecessary until all comments have been consumed, which can lead to pauses while loading\nfrom the API.\n# Examples\n```\nuse rawr::client::RedditClient;\nuse rawr::options::ListingOptions;\nuse rawr::traits::Commentable;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet announcements = client.subreddit(&quot;announcements&quot;);\nlet announcement = announcements.hot(ListingOptions::default())\n    .expect(&quot;Could not fetch announcements&quot;)\n    .next().unwrap();\n// Usually less than 100 top-level comments are fetched at a time, but the CommentList\n// fetches it for us!\nlet comments = announcement.replies().expect(&quot;Could not get comments&quot;).take(100);\n```",null,null],[3,"CommentStream","","A stream of comments from oldest to newest that updates via polling every 5 seconds.",null,null],[11,"new","","Creates a `CommentList` by storing all comments in the `CommentList.comments` list\nand all &#39;more&#39; items in the `CommentList.more` list. Do not use this method - instead, use\n`Submission.replies()` or `Comment.replies()`.",36,{"inputs":[{"name":"redditclient"},{"name":"string"},{"name":"string"},{"name":"vec"}],"output":{"name":"commentlist"}}],[11,"empty","","Creates an empty listing, when there are no comments to show.",36,{"inputs":[{"name":"redditclient"}],"output":{"name":"commentlist"}}],[11,"add_reply","","Adds a (pre-existing) comment to the reply list. This is an internal method, and does not\nactually post a comment, just adds one that has already been fetched.",36,null],[11,"next","","",36,null],[11,"new","","Internal method. Use `Submission.reply_stream()` instead.",37,{"inputs":[{"name":"redditclient"},{"name":"string"},{"name":"string"}],"output":{"name":"commentstream"}}],[11,"next","","",37,null],[0,"listing","rawr::structures","Paginated list of submissions.",null,null],[3,"Listing","rawr::structures::listing","A paginated listing of posts that can be iterated through. Posts are fetched lazily\nuntil the listing is exhausted (similar to an infinite scroll of posts).\n# Examples\n```rust,no_run\nuse rawr::client::RedditClient;\nuse rawr::options::ListingOptions;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet sub = client.subreddit(&quot;redditdev&quot;);\nlet mut hot = sub.hot(ListingOptions::default()).expect(&quot;Could not get hot posts&quot;);\nfor post in hot.take(500) {\n    // Do something with each post here\n}\n```\n# Gotchas\nBe careful when looping directly over a listing - if you&#39;re iterating through a very long\nlisting, like /r/all/new, your code never stop!",null,null],[3,"PostStream","","An infinite stream of posts which updates as posts are received. Stores a list of seen posts\nso that each post is only seen once.",null,null],[11,"new","","Internal method. Use other functions that return Listings, such as `Subreddit.hot()`.",38,{"inputs":[{"name":"redditclient"},{"name":"string"},{"name":"listingdata"}],"output":{"name":"listing"}}],[11,"before","","",38,null],[11,"after","","",38,null],[11,"modhash","","",38,null],[11,"next","","",38,null],[11,"new","","Internal method. Use `Subreddit.new_stream()` instead.",39,{"inputs":[{"name":"redditclient"},{"name":"string"}],"output":{"name":"poststream"}}],[11,"next","","",39,null],[0,"subreddit","rawr::structures","Structures representing subreddits, allowing access to &#39;about&#39; data and subreddit listings.",null,null],[3,"Subreddit","rawr::structures::subreddit","The `Subreddit` struct represents a subreddit and allows access to post listings\nand data about the subreddit.",null,null],[12,"name","","The name of the subreddit represented by this struct.",40,null],[3,"SubredditAbout","","Information about a subreddit such as subscribers, sidebar text and active users.",null,null],[11,"eq","","",40,null],[11,"create_new","","Creates a `Subreddit` from a client and the subreddit&#39;s name. Do not use this directly -\nuse `Client.subreddit(NAME)` instead.",40,{"inputs":[{"name":"redditclient"},{"name":"str"}],"output":{"name":"subreddit"}}],[11,"hot","","Gets a listing of the hot feed for this subreddit. The first page may include some sticky\nposts in addtion to the expected posts.\n# Examples\n```\nuse rawr::client::RedditClient;\nuse rawr::options::ListingOptions;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet sub = client.subreddit(&quot;askreddit&quot;);\nlet hot = sub.hot(ListingOptions::default());\n```",40,null],[11,"new_stream","","Gets a `PostStream` of the new posts in the subreddit. The iterator will yield values\nforever, unless it is manually ended at some point. For tips, check the `PostStream` class.\n# Examples\n```rust,no_run\nuse rawr::prelude::*;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet askreddit = client.subreddit(&quot;askreddit&quot;);\nfor post in askreddit.new_stream() {",40,null],[11,"new","","Gets a listing of the new feed for this subreddit.\n# Examples\n```\nuse rawr::client::RedditClient;\nuse rawr::options::ListingOptions;\nuse rawr::traits::Content;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet sub = client.subreddit(&quot;programming&quot;);\nlet mut new = sub.new(ListingOptions::default()).expect(&quot;Could not get new feed&quot;);\nassert_eq!(new.next().unwrap().subreddit().name, &quot;programming&quot;);\n```",40,null],[11,"rising","","Gets a listing of the rising feed for this subreddit. Usually much shorter than the other\nlistings; may be empty.\n# Examples\n```\nuse rawr::client::RedditClient;\nuse rawr::options::ListingOptions;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet sub = client.subreddit(&quot;thanksobama&quot;);\nlet rising = sub.rising(ListingOptions::default()).unwrap();\nassert_eq!(rising.count(), 0);\n```",40,null],[11,"top","","Gets a listing of the top feed for this subreddit. Also requires a time filter (\n`rawr::options::TimeFilter`) which is equivalent to the &quot;links from: all time&quot; dropdown\non the website.\n# Examples\n```\nuse rawr::client::RedditClient;\nuse rawr::options::{ListingOptions, TimeFilter};\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet sub = client.subreddit(&quot;thanksobama&quot;);\nlet mut top = sub.top(ListingOptions::default(), TimeFilter::AllTime)\n    .expect(&quot;Request failed&quot;);\nassert_eq!(top.next().unwrap().title(), &quot;Thanks Me&quot;);\n```",40,null],[11,"controversial","","Gets a listing of the controversial feed for this subreddit. Also requires a time filter (\n`rawr::options::TimeFilter`) which is equivalent to the &quot;links from: all time&quot; dropdown\non the website.",40,null],[11,"submit_link","","Submits a link post to this subreddit using the specified parameters. If the link has\nalready been posted, this will fail unless you specifically allow reposts.\n# Examples\n## Allowing a link to be reposted\n```\nuse rawr::options::LinkPost;\nlet post = LinkPost::new(&quot;rawr!&quot;, &quot;http://example.com&quot;).resubmit();\n```\n## Submitting a post\n```rust,no_run\nuse rawr::auth::PasswordAuthenticator;\nuse rawr::client::RedditClient;\nuse rawr::options::LinkPost;\nlet client = RedditClient::new(&quot;rawr&quot;, PasswordAuthenticator::new(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));\nlet sub = client.subreddit(&quot;rust&quot;);\nlet post = LinkPost::new(&quot;rawr!&quot;, &quot;http://example.com&quot;);\nsub.submit_link(post).expect(&quot;Posting failed!&quot;);\n```",40,null],[11,"submit_text","","Submits a text post (self post) to this subreddit using the specified title and body.\n# Examples\n## Submitting a post\n```rust,no_run\nuse rawr::auth::PasswordAuthenticator;\nuse rawr::client::RedditClient;\nuse rawr::options::SelfPost;\nlet client = RedditClient::new(&quot;rawr&quot;, PasswordAuthenticator::new(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));\nlet sub = client.subreddit(&quot;rust&quot;);\nlet post = SelfPost::new(&quot;I love rawr!&quot;, &quot;You should download it *right now*!&quot;);\nsub.submit_text(post).expect(&quot;Posting failed!&quot;);\n```",40,null],[11,"about","","Fetches information about a subreddit such as subscribers, active users and sidebar\ninformation.\n# Examples\n```\nuse rawr::client::RedditClient;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet learn_programming = client.subreddit(&quot;learnprogramming&quot;).about()\n    .expect(&quot;Could not fetch &#39;about&#39; data&quot;);\nassert_eq!(learn_programming.display_name(), &quot;learnprogramming&quot;);\n```",40,null],[11,"created","","",41,null],[11,"created_utc","","",41,null],[11,"new","","Creates a new `SubredditAbout` instance. Use `Subreddit.about()` instead to get\ninformation about a subreddit.",41,{"inputs":[{"name":"subredditaboutdata"}],"output":{"name":"subredditabout"}}],[11,"subscribers","","The number of subscribers to this subreddit.",41,null],[11,"active_users","","The number of logged-in users who have viewed this subreddit in the last 15\nminutes.",41,null],[11,"public","","Returns `true` if the subreddit is visible to the public (i.e. not invitation only)",41,null],[11,"display_name","","The display name of the subreddit, not including leading /r/",41,null],[0,"user","rawr::structures","Structures representing users and relevant API data.",null,null],[3,"User","rawr::structures::user","Interface to a Reddit user, which can be used to access their karma and moderator status.",null,null],[12,"name","","The name of the user that this struct represents.",42,null],[3,"UserAbout","","Information about a user from /r/username/about, such as karma and ID.",null,null],[11,"new","","Internal method. Use `RedditClient.user(NAME)` instead.",42,{"inputs":[{"name":"redditclient"},{"name":"str"}],"output":{"name":"user"}}],[11,"about","","Gets information about this user.\n# Example\n```\nuse rawr::client::RedditClient;\nuse rawr::auth::AnonymousAuthenticator;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet user = client.user(&quot;Aurora0001&quot;).about().expect(&quot;User request failed&quot;);\nassert_eq!(user.id(), &quot;eqyvc&quot;);\n```",42,null],[11,"flair_options","","Gets a list of possible **user** flairs that can be added in this subreddit.",42,null],[11,"flair","","Sets the flair for this user in the specified subreddit, using the specified template\nstring. You can get the template string from `flair_options`; either:\n- use the returned `FlairList` and call the method `find_text` which will return the\ntemplate ID of the flair with the specified text.\n- iterate through the `FlairList`, and get the `FlairChoice.flair_template_id` value.",42,null],[11,"submissions","","Gets a list of *submissions* that the specified user has submitted. This endpoint is a\nlisting and will continue yielding items until every item has been exhausted.\n# Examples\n```\nuse rawr::prelude::*;\nlet client = RedditClient::new(&quot;rawr&quot;, AnonymousAuthenticator::new());\nlet user = client.user(&quot;Aurora0001&quot;);\nlet submissions = user.submissions().expect(&quot;Could not fetch!&quot;);\nlet mut i = 0;\nfor submission in submissions.take(5) {\n    i += 1;\n}\nassert_eq!(i, 5);\n```",42,null],[11,"new","","Internal method. Use `RedditClient.user(NAME).about()` instead.",43,{"inputs":[{"name":"redditclient"},{"name":"string"}],"output":{"name":"result"}}],[11,"link_karma","","Gets the user&#39;s link karma (including self post karma as of July 19th, 2016).",43,null],[11,"comment_karma","","Gets the user&#39;s comment karma.",43,null],[11,"id","","Gets the user ID, not including kind, e.g. &#39;eqyvc&#39;.",43,null],[11,"created","","",43,null],[11,"created_utc","","",43,null],[0,"messages","rawr::structures","Structures for private messages.",null,null],[3,"Message","rawr::structures::messages","A representation of a private message from Reddit.",null,null],[3,"MessageInterface","","A helper struct which allows access to the inbox, unread messages and other message queues.",null,null],[3,"MessageListing","","A listing of messages that will auto-paginate until all messages in the listing have been\nexhausted.",null,null],[3,"MessageStream","","A stream of unread messages from oldest to newest. Before being yielded from this iterator,\neach message will be marked as read (and will not show up in the unread queue again).",null,null],[11,"new","","Internal method. Use `RedditClient.messages().inbox()` or `unread()` instead to get\nmessage listings and individual messages.",44,{"inputs":[{"name":"redditclient"},{"name":"messagedata"}],"output":{"name":"message"}}],[11,"mark_read","","Marks this message as read, so it will not show in the unread queue.",44,null],[11,"reply_count","","",44,null],[11,"replies","","",44,null],[11,"reply","","",44,null],[11,"created","","",44,null],[11,"created_utc","","",44,null],[11,"author","","",44,null],[11,"author_flair_text","","",44,null],[11,"author_flair_css","","",44,null],[11,"subreddit","","",44,null],[11,"delete","","",44,null],[11,"name","","",44,null],[11,"edited","","",44,null],[11,"edited_time","","",44,null],[11,"edit","","",44,null],[11,"body","","",44,null],[11,"body_html","","",44,null],[11,"new","","Internal method. Use `RedditClient.messages()` instead.",45,{"inputs":[{"name":"redditclient"}],"output":{"name":"messageinterface"}}],[11,"inbox","","Gets a list of all received messages that have not been deleted.",45,null],[11,"unread","","Gets all messages that have **not** been marked as read.",45,null],[11,"unread_stream","","Gets a `MessageStream` of unread posts, marking each one as read after yielding it from\nthe iterator. This can be useful to monitor /u/username mentions, replies to comments/posts\nand private messages.\n# Examples\n```rust,no_run\nuse rawr::prelude::*;\nlet client = RedditClient::new(&quot;rawr&quot;, PasswordAuthenticator::new(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));\nfor message in client.messages().unread_stream() {\n    println!(&quot;New message received.&quot;);\n}\n```",45,null],[11,"new","","Internal method. Use `RedditClient.messages()` and request one of the message listings\n(e.g. `inbox(LISTING_OPTIONS)`).",46,{"inputs":[{"name":"redditclient"},{"name":"string"},{"name":"listingdata"}],"output":{"name":"messagelisting"}}],[11,"before","","",46,null],[11,"after","","",46,null],[11,"modhash","","",46,null],[11,"next","","",46,null],[11,"new","","Internal method. Use `Subreddit.new_stream()` instead.",47,{"inputs":[{"name":"redditclient"},{"name":"string"}],"output":{"name":"messagestream"}}],[11,"next","","",47,null],[0,"options","rawr","Configuration options for API requests.",null,null],[3,"ListingOptions","rawr::options","Configures a paginated listing.",null,null],[12,"batch","","The maximum amount of posts to fetch in one request.",48,null],[12,"anchor","","See `ListingAnchor` for explanation of this property.",48,null],[3,"LinkPost","","Options used when creating a link post. See `structures::subreddit` for examples of usage.",null,null],[12,"title","","The title of the link post to create",49,null],[12,"link","","The URL of the link to post. If this has been posted before, you **must** mark this as a\nresubmission or the API will raise an error. See `LinkPost::resubmit()` for an example.",49,null],[12,"resubmit","","True if resubmitting this link is intended.",49,null],[3,"SelfPost","","Options used when creating a self post. See `structures::subreddit` for examples of usage.",null,null],[12,"title","","The title of the link post to create",50,null],[12,"text","","The markdown post body.",50,null],[4,"ListingAnchor","","Used to &#39;anchor&#39; the pagination so you can get all posts before/after a post.",null,null],[13,"After","","Gets all items after the specified one, e.g. gets posts older than the specified post in\nthe new queue.",51,null],[13,"Before","","Gets all items before the specified one, e.g. gets posts higher than the specified one in\nthe top queue.",51,null],[13,"None","","Use no anchor.",51,null],[4,"TimeFilter","","Used for filtering by time in the top and controversial queues.",null,null],[13,"Hour","","",52,null],[13,"Day","","",52,null],[13,"Week","","",52,null],[13,"Month","","",52,null],[13,"Year","","",52,null],[13,"AllTime","","",52,null],[11,"fmt","","",48,null],[11,"default","","Provides the default options (25 posts per page, starts at first post in listing). If\nyou are unsure, this will act like the default display options on Reddit.",48,{"inputs":[],"output":{"name":"listingoptions"}}],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"new","","Creates a new `LinkPost` structure that contains the options for a link post.\nThe post is not actually sent at this point.",49,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"linkpost"}}],[11,"resubmit","","Marks this post as a resubmission, so the API will accept it even if it has been submitted\nin this subreddit before.\n# Examples\n```\nuse rawr::options::LinkPost;\nlet post = LinkPost::new(&quot;Look at this!&quot;, &quot;http://example.com/foo&quot;).resubmit();\n```",49,null],[11,"new","","Creates a new `SelfPost` object. The post will not be submitted until you use\n`Subreddit.submit_text()`.",50,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"selfpost"}}],[0,"prelude","rawr","Basic `rawr` structures to import with `use rawr::prelude::*`;",null,null]],"paths":[[8,"Authenticator"],[3,"AnonymousAuthenticator"],[3,"PasswordAuthenticator"],[3,"RedditClient"],[3,"BasicThing"],[3,"ThingList"],[3,"FlairSelectorResponse"],[3,"FlairChoice"],[3,"CurrentFlairResponse"],[3,"SubredditAboutData"],[3,"ListingData"],[3,"Submission"],[3,"TokenResponse"],[3,"Comment"],[3,"More"],[3,"MoreComments"],[3,"MoreCommentsInner"],[3,"UserAboutData"],[3,"Message"],[8,"Votable"],[8,"PageListing"],[8,"Created"],[8,"Editable"],[8,"Content"],[8,"Commentable"],[8,"Stickable"],[8,"Lockable"],[8,"Reportable"],[8,"Flairable"],[8,"Visible"],[8,"Distinguishable"],[4,"APIError"],[3,"Comment"],[3,"FlairList"],[3,"Submission"],[3,"LazySubmission"],[3,"CommentList"],[3,"CommentStream"],[3,"Listing"],[3,"PostStream"],[3,"Subreddit"],[3,"SubredditAbout"],[3,"User"],[3,"UserAbout"],[3,"Message"],[3,"MessageInterface"],[3,"MessageListing"],[3,"MessageStream"],[3,"ListingOptions"],[3,"LinkPost"],[3,"SelfPost"],[4,"ListingAnchor"],[4,"TimeFilter"]]};
initSearch(searchIndex);
