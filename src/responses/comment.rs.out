use serde_json::Value;
use responses::{BasicThing, ThingList};
use responses::listing::ListingData;

/// The 'listing' format for comments.
pub type CommentListing = BasicThing<ListingData<Value>>;

/// A deserializable structure representing a comment. This is created when the client returns
/// JSON representing a comment and this is wrapped in a `models::comment::Comment` for
/// ease-of-use.
#[derive(Debug)]
pub struct Comment {
    /// The Reddit ID for the subreddit where this was posted, **including the leading `t5_`**.
    pub subreddit_id: String,
    /// Contains the name of the moderator who banned this, if the logged-in user is a moderator
    /// of this subreddit and this is banned.
    pub banned_by: Option<String>,
    /// The reason for the post removal, if you are a moderator **and** this post has been
    /// removed.
    pub removal_reason: Option<String>,
    /// The ID (including kind) of the parent post (i.e. the link post or self post).
    pub link_id: String,
    /// This is `Some(true)` if the logged-in user has upvoted this submission, `Some(false)` if
    /// the user has downvoted this submission or `None` if the user has not voted.
    pub likes: Option<bool>,
    /// A listing of replies to this comment. Do not access this directly - use the functions
    /// of `Comment` instead.
    pub replies: Value,
    // TODO: skipped user_reports
    /// True if the logged-in user has saved this submission.
    pub saved: bool,
    /// The ID of the post in base-36 form, as used in Reddit's links.
    pub id: String,
    /// The amount of times that a user has been gilded (gifted Reddit Gold).
    pub gilded: u64,
    /// This is `true` if Reddit has archived the submission (usually done after 6 months).
    /// Archived submissions cannot be voted or commented upon.
    pub archived: bool,
    // TODO: skipped report_reasons
    /// The name of the author of the submission (not including the leading `/u/`)
    pub author: String,
    /// The overall points score of this post, as shown on the upvote counter. This is the
    /// same as upvotes - downvotes (however, this figure may be fuzzed by Reddit, and may not
    /// be exact)
    pub score: i64,
    /// This contains the name of the user who approved this submission. This is `None` unless
    /// you are a mod of the subreddit **and** a user has approved this post.
    pub approved_by: Option<String>,
    // TODO: skipped controversiality
    /// The main post text.
    pub body: String,
    /// This is `false` if the submission is not edited and is the edit timestamp if it is edited.
    /// Access through the functions of `Submission` instead.
    pub edited: Value,
    /// The CSS class set for the author's flair (if available). If there is no flair, this is
    /// `None`.
    pub author_flair_css_class: Option<String>,
    /// The number of downvotes (fuzzed; see `score` for further explanation)
    pub downs: i64,
    /// The number of upvotes (fuzzed; see `score` for further explanation)
    pub ups: i64,
    /// Contains the HTML of the post body.
    pub body_html: String,
    /// The subreddit that this submission was posted in (not including `/r/`)
    pub subreddit: String,
    /// The full 'Thing ID', consisting of a 'kind' and a base-36 identifier. The valid kinds are:
    /// - t1_ - Comment
    /// - t2_ - Account
    /// - t3_ - Link
    /// - t4_ - Message
    /// - t5_ - Subreddit
    /// - t6_ - Award
    /// - t8_ - PromoCampaign
    pub name: String,
    /// `true` if the score should not be displayed.
    pub score_hidden: bool,
    /// This is `true` if this submission is stickied (an 'annoucement' thread)
    pub stickied: bool,
    /// A timestamp of the time when the post was created, in the logged-in user's **local**
    /// time.
    pub created: i64,
    /// The text of the author's flair, if present. Can be an empty string if the flair is present
    /// but contains no text.
    pub author_flair_text: Option<String>,
    /// A timestamp of the time when the post was created, in **UTC**.
    pub created_utc: i64,
    /// Indicates whether the user has used a special flag for themselves, e.g. [M] or [A].
    /// Possible values:
    /// - None - Normal user
    /// - Some("moderator") - [M]
    /// - Some("admin") - [A]
    /// - Some("special") - other special 'distinguishes' e.g. [Î”]
    pub distinguished: Option<String>,
    pub num_reports: Option<u64>,
     // TODO: skipped mod_reports
    pub parent_id: String,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_Comment: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for Comment {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<Comment, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __field15,
                        __field16,
                        __field17,
                        __field18,
                        __field19,
                        __field20,
                        __field21,
                        __field22,
                        __field23,
                        __field24,
                        __field25,
                        __field26,
                        __field27,
                        __field28,
                        __ignore,
                    }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        2usize => { Ok(__Field::__field2) }
                                        3usize => { Ok(__Field::__field3) }
                                        4usize => { Ok(__Field::__field4) }
                                        5usize => { Ok(__Field::__field5) }
                                        6usize => { Ok(__Field::__field6) }
                                        7usize => { Ok(__Field::__field7) }
                                        8usize => { Ok(__Field::__field8) }
                                        9usize => { Ok(__Field::__field9) }
                                        10usize => { Ok(__Field::__field10) }
                                        11usize => { Ok(__Field::__field11) }
                                        12usize => { Ok(__Field::__field12) }
                                        13usize => { Ok(__Field::__field13) }
                                        14usize => { Ok(__Field::__field14) }
                                        15usize => { Ok(__Field::__field15) }
                                        16usize => { Ok(__Field::__field16) }
                                        17usize => { Ok(__Field::__field17) }
                                        18usize => { Ok(__Field::__field18) }
                                        19usize => { Ok(__Field::__field19) }
                                        20usize => { Ok(__Field::__field20) }
                                        21usize => { Ok(__Field::__field21) }
                                        22usize => { Ok(__Field::__field22) }
                                        23usize => { Ok(__Field::__field23) }
                                        24usize => { Ok(__Field::__field24) }
                                        25usize => { Ok(__Field::__field25) }
                                        26usize => { Ok(__Field::__field26) }
                                        27usize => { Ok(__Field::__field27) }
                                        28usize => { Ok(__Field::__field28) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "subreddit_id" => {
                                            Ok(__Field::__field0)
                                        }
                                        "banned_by" => {
                                            Ok(__Field::__field1)
                                        }
                                        "removal_reason" => {
                                            Ok(__Field::__field2)
                                        }
                                        "link_id" => { Ok(__Field::__field3) }
                                        "likes" => { Ok(__Field::__field4) }
                                        "replies" => { Ok(__Field::__field5) }
                                        "saved" => { Ok(__Field::__field6) }
                                        "id" => { Ok(__Field::__field7) }
                                        "gilded" => { Ok(__Field::__field8) }
                                        "archived" => {
                                            Ok(__Field::__field9)
                                        }
                                        "author" => { Ok(__Field::__field10) }
                                        "score" => { Ok(__Field::__field11) }
                                        "approved_by" => {
                                            Ok(__Field::__field12)
                                        }
                                        "body" => { Ok(__Field::__field13) }
                                        "edited" => { Ok(__Field::__field14) }
                                        "author_flair_css_class" => {
                                            Ok(__Field::__field15)
                                        }
                                        "downs" => { Ok(__Field::__field16) }
                                        "ups" => { Ok(__Field::__field17) }
                                        "body_html" => {
                                            Ok(__Field::__field18)
                                        }
                                        "subreddit" => {
                                            Ok(__Field::__field19)
                                        }
                                        "name" => { Ok(__Field::__field20) }
                                        "score_hidden" => {
                                            Ok(__Field::__field21)
                                        }
                                        "stickied" => {
                                            Ok(__Field::__field22)
                                        }
                                        "created" => {
                                            Ok(__Field::__field23)
                                        }
                                        "author_flair_text" => {
                                            Ok(__Field::__field24)
                                        }
                                        "created_utc" => {
                                            Ok(__Field::__field25)
                                        }
                                        "distinguished" => {
                                            Ok(__Field::__field26)
                                        }
                                        "num_reports" => {
                                            Ok(__Field::__field27)
                                        }
                                        "parent_id" => {
                                            Ok(__Field::__field28)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"subreddit_id" => {
                                            Ok(__Field::__field0)
                                        }
                                        b"banned_by" => {
                                            Ok(__Field::__field1)
                                        }
                                        b"removal_reason" => {
                                            Ok(__Field::__field2)
                                        }
                                        b"link_id" => {
                                            Ok(__Field::__field3)
                                        }
                                        b"likes" => { Ok(__Field::__field4) }
                                        b"replies" => {
                                            Ok(__Field::__field5)
                                        }
                                        b"saved" => { Ok(__Field::__field6) }
                                        b"id" => { Ok(__Field::__field7) }
                                        b"gilded" => { Ok(__Field::__field8) }
                                        b"archived" => {
                                            Ok(__Field::__field9)
                                        }
                                        b"author" => {
                                            Ok(__Field::__field10)
                                        }
                                        b"score" => { Ok(__Field::__field11) }
                                        b"approved_by" => {
                                            Ok(__Field::__field12)
                                        }
                                        b"body" => { Ok(__Field::__field13) }
                                        b"edited" => {
                                            Ok(__Field::__field14)
                                        }
                                        b"author_flair_css_class" => {
                                            Ok(__Field::__field15)
                                        }
                                        b"downs" => { Ok(__Field::__field16) }
                                        b"ups" => { Ok(__Field::__field17) }
                                        b"body_html" => {
                                            Ok(__Field::__field18)
                                        }
                                        b"subreddit" => {
                                            Ok(__Field::__field19)
                                        }
                                        b"name" => { Ok(__Field::__field20) }
                                        b"score_hidden" => {
                                            Ok(__Field::__field21)
                                        }
                                        b"stickied" => {
                                            Ok(__Field::__field22)
                                        }
                                        b"created" => {
                                            Ok(__Field::__field23)
                                        }
                                        b"author_flair_text" => {
                                            Ok(__Field::__field24)
                                        }
                                        b"created_utc" => {
                                            Ok(__Field::__field25)
                                        }
                                        b"distinguished" => {
                                            Ok(__Field::__field26)
                                        }
                                        b"num_reports" => {
                                            Ok(__Field::__field27)
                                        }
                                        b"parent_id" => {
                                            Ok(__Field::__field28)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: 


                          _serde::de::Deserializer> _serde::de::Visitor for
                     __Visitor<__D> {
                        type
                        Value
                        =
                        Comment;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<Comment, __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                let __field2 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(2usize));
                                        }
                                    };
                                let __field3 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(3usize));
                                        }
                                    };
                                let __field4 =
                                    match try!(visitor . visit :: <
                                               Option<bool> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(4usize));
                                        }
                                    };
                                let __field5 =
                                    match try!(visitor . visit :: < Value > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(5usize));
                                        }
                                    };
                                let __field6 =
                                    match try!(visitor . visit :: < bool > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(6usize));
                                        }
                                    };
                                let __field7 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(7usize));
                                        }
                                    };
                                let __field8 =
                                    match try!(visitor . visit :: < u64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(8usize));
                                        }
                                    };
                                let __field9 =
                                    match try!(visitor . visit :: < bool > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(9usize));
                                        }
                                    };
                                let __field10 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(10usize));
                                        }
                                    };
                                let __field11 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(11usize));
                                        }
                                    };
                                let __field12 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(12usize));
                                        }
                                    };
                                let __field13 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(13usize));
                                        }
                                    };
                                let __field14 =
                                    match try!(visitor . visit :: < Value > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(14usize));
                                        }
                                    };
                                let __field15 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(15usize));
                                        }
                                    };
                                let __field16 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(16usize));
                                        }
                                    };
                                let __field17 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(17usize));
                                        }
                                    };
                                let __field18 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(18usize));
                                        }
                                    };
                                let __field19 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(19usize));
                                        }
                                    };
                                let __field20 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(20usize));
                                        }
                                    };
                                let __field21 =
                                    match try!(visitor . visit :: < bool > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(21usize));
                                        }
                                    };
                                let __field22 =
                                    match try!(visitor . visit :: < bool > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(22usize));
                                        }
                                    };
                                let __field23 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(23usize));
                                        }
                                    };
                                let __field24 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(24usize));
                                        }
                                    };
                                let __field25 =
                                    match try!(visitor . visit :: < i64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(25usize));
                                        }
                                    };
                                let __field26 =
                                    match try!(visitor . visit :: <
                                               Option<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(26usize));
                                        }
                                    };
                                let __field27 =
                                    match try!(visitor . visit :: <
                                               Option<u64> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(27usize));
                                        }
                                    };
                                let __field28 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(28usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(Comment{subreddit_id: __field0,
                                           banned_by: __field1,
                                           removal_reason: __field2,
                                           link_id: __field3,
                                           likes: __field4,
                                           replies: __field5,
                                           saved: __field6,
                                           id: __field7,
                                           gilded: __field8,
                                           archived: __field9,
                                           author: __field10,
                                           score: __field11,
                                           approved_by: __field12,
                                           body: __field13,
                                           edited: __field14,
                                           author_flair_css_class: __field15,
                                           downs: __field16,
                                           ups: __field17,
                                           body_html: __field18,
                                           subreddit: __field19,
                                           name: __field20,
                                           score_hidden: __field21,
                                           stickied: __field22,
                                           created: __field23,
                                           author_flair_text: __field24,
                                           created_utc: __field25,
                                           distinguished: __field26,
                                           num_reports: __field27,
                                           parent_id: __field28,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<Comment, __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<String> = None;
                                let mut __field1: Option<Option<String>> =
                                    None;
                                let mut __field2: Option<Option<String>> =
                                    None;
                                let mut __field3: Option<String> = None;
                                let mut __field4: Option<Option<bool>> = None;
                                let mut __field5: Option<Value> = None;
                                let mut __field6: Option<bool> = None;
                                let mut __field7: Option<String> = None;
                                let mut __field8: Option<u64> = None;
                                let mut __field9: Option<bool> = None;
                                let mut __field10: Option<String> = None;
                                let mut __field11: Option<i64> = None;
                                let mut __field12: Option<Option<String>> =
                                    None;
                                let mut __field13: Option<String> = None;
                                let mut __field14: Option<Value> = None;
                                let mut __field15: Option<Option<String>> =
                                    None;
                                let mut __field16: Option<i64> = None;
                                let mut __field17: Option<i64> = None;
                                let mut __field18: Option<String> = None;
                                let mut __field19: Option<String> = None;
                                let mut __field20: Option<String> = None;
                                let mut __field21: Option<bool> = None;
                                let mut __field22: Option<bool> = None;
                                let mut __field23: Option<i64> = None;
                                let mut __field24: Option<Option<String>> =
                                    None;
                                let mut __field25: Option<i64> = None;
                                let mut __field26: Option<Option<String>> =
                                    None;
                                let mut __field27: Option<Option<u64>> = None;
                                let mut __field28: Option<String> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("subreddit_id"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("banned_by"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field2 => {
                                            if __field2.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("removal_reason"));
                                            }
                                            __field2 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field3 => {
                                            if __field3.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("link_id"));
                                            }
                                            __field3 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field4 => {
                                            if __field4.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("likes"));
                                            }
                                            __field4 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<bool> > (
                                                          )));
                                        }
                                        __Field::__field5 => {
                                            if __field5.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("replies"));
                                            }
                                            __field5 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Value > (  )));
                                        }
                                        __Field::__field6 => {
                                            if __field6.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("saved"));
                                            }
                                            __field6 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          bool > (  )));
                                        }
                                        __Field::__field7 => {
                                            if __field7.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("id"));
                                            }
                                            __field7 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field8 => {
                                            if __field8.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("gilded"));
                                            }
                                            __field8 =
                                                Some(try!(visitor .
                                                          visit_value :: < u64
                                                          > (  )));
                                        }
                                        __Field::__field9 => {
                                            if __field9.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("archived"));
                                            }
                                            __field9 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          bool > (  )));
                                        }
                                        __Field::__field10 => {
                                            if __field10.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("author"));
                                            }
                                            __field10 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field11 => {
                                            if __field11.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("score"));
                                            }
                                            __field11 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        __Field::__field12 => {
                                            if __field12.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("approved_by"));
                                            }
                                            __field12 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field13 => {
                                            if __field13.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("body"));
                                            }
                                            __field13 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field14 => {
                                            if __field14.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("edited"));
                                            }
                                            __field14 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Value > (  )));
                                        }
                                        __Field::__field15 => {
                                            if __field15.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("author_flair_css_class"));
                                            }
                                            __field15 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field16 => {
                                            if __field16.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("downs"));
                                            }
                                            __field16 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        __Field::__field17 => {
                                            if __field17.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("ups"));
                                            }
                                            __field17 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        __Field::__field18 => {
                                            if __field18.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("body_html"));
                                            }
                                            __field18 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field19 => {
                                            if __field19.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("subreddit"));
                                            }
                                            __field19 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field20 => {
                                            if __field20.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("name"));
                                            }
                                            __field20 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field21 => {
                                            if __field21.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("score_hidden"));
                                            }
                                            __field21 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          bool > (  )));
                                        }
                                        __Field::__field22 => {
                                            if __field22.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("stickied"));
                                            }
                                            __field22 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          bool > (  )));
                                        }
                                        __Field::__field23 => {
                                            if __field23.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("created"));
                                            }
                                            __field23 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        __Field::__field24 => {
                                            if __field24.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("author_flair_text"));
                                            }
                                            __field24 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field25 => {
                                            if __field25.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("created_utc"));
                                            }
                                            __field25 =
                                                Some(try!(visitor .
                                                          visit_value :: < i64
                                                          > (  )));
                                        }
                                        __Field::__field26 => {
                                            if __field26.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("distinguished"));
                                            }
                                            __field26 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<String> > (
                                                          )));
                                        }
                                        __Field::__field27 => {
                                            if __field27.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("num_reports"));
                                            }
                                            __field27 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Option<u64> > (
                                                          )));
                                        }
                                        __Field::__field28 => {
                                            if __field28.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("parent_id"));
                                            }
                                            __field28 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "subreddit_id" )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field (
                                             "banned_by" )),
                                    };
                                let __field2 =
                                    match __field2 {
                                        Some(__field2) => __field2,
                                        None =>
                                        try!(visitor . missing_field (
                                             "removal_reason" )),
                                    };
                                let __field3 =
                                    match __field3 {
                                        Some(__field3) => __field3,
                                        None =>
                                        try!(visitor . missing_field (
                                             "link_id" )),
                                    };
                                let __field4 =
                                    match __field4 {
                                        Some(__field4) => __field4,
                                        None =>
                                        try!(visitor . missing_field ( "likes"
                                             )),
                                    };
                                let __field5 =
                                    match __field5 {
                                        Some(__field5) => __field5,
                                        None =>
                                        try!(visitor . missing_field (
                                             "replies" )),
                                    };
                                let __field6 =
                                    match __field6 {
                                        Some(__field6) => __field6,
                                        None =>
                                        try!(visitor . missing_field ( "saved"
                                             )),
                                    };
                                let __field7 =
                                    match __field7 {
                                        Some(__field7) => __field7,
                                        None =>
                                        try!(visitor . missing_field ( "id"
                                             )),
                                    };
                                let __field8 =
                                    match __field8 {
                                        Some(__field8) => __field8,
                                        None =>
                                        try!(visitor . missing_field (
                                             "gilded" )),
                                    };
                                let __field9 =
                                    match __field9 {
                                        Some(__field9) => __field9,
                                        None =>
                                        try!(visitor . missing_field (
                                             "archived" )),
                                    };
                                let __field10 =
                                    match __field10 {
                                        Some(__field10) => __field10,
                                        None =>
                                        try!(visitor . missing_field (
                                             "author" )),
                                    };
                                let __field11 =
                                    match __field11 {
                                        Some(__field11) => __field11,
                                        None =>
                                        try!(visitor . missing_field ( "score"
                                             )),
                                    };
                                let __field12 =
                                    match __field12 {
                                        Some(__field12) => __field12,
                                        None =>
                                        try!(visitor . missing_field (
                                             "approved_by" )),
                                    };
                                let __field13 =
                                    match __field13 {
                                        Some(__field13) => __field13,
                                        None =>
                                        try!(visitor . missing_field ( "body"
                                             )),
                                    };
                                let __field14 =
                                    match __field14 {
                                        Some(__field14) => __field14,
                                        None =>
                                        try!(visitor . missing_field (
                                             "edited" )),
                                    };
                                let __field15 =
                                    match __field15 {
                                        Some(__field15) => __field15,
                                        None =>
                                        try!(visitor . missing_field (
                                             "author_flair_css_class" )),
                                    };
                                let __field16 =
                                    match __field16 {
                                        Some(__field16) => __field16,
                                        None =>
                                        try!(visitor . missing_field ( "downs"
                                             )),
                                    };
                                let __field17 =
                                    match __field17 {
                                        Some(__field17) => __field17,
                                        None =>
                                        try!(visitor . missing_field ( "ups"
                                             )),
                                    };
                                let __field18 =
                                    match __field18 {
                                        Some(__field18) => __field18,
                                        None =>
                                        try!(visitor . missing_field (
                                             "body_html" )),
                                    };
                                let __field19 =
                                    match __field19 {
                                        Some(__field19) => __field19,
                                        None =>
                                        try!(visitor . missing_field (
                                             "subreddit" )),
                                    };
                                let __field20 =
                                    match __field20 {
                                        Some(__field20) => __field20,
                                        None =>
                                        try!(visitor . missing_field ( "name"
                                             )),
                                    };
                                let __field21 =
                                    match __field21 {
                                        Some(__field21) => __field21,
                                        None =>
                                        try!(visitor . missing_field (
                                             "score_hidden" )),
                                    };
                                let __field22 =
                                    match __field22 {
                                        Some(__field22) => __field22,
                                        None =>
                                        try!(visitor . missing_field (
                                             "stickied" )),
                                    };
                                let __field23 =
                                    match __field23 {
                                        Some(__field23) => __field23,
                                        None =>
                                        try!(visitor . missing_field (
                                             "created" )),
                                    };
                                let __field24 =
                                    match __field24 {
                                        Some(__field24) => __field24,
                                        None =>
                                        try!(visitor . missing_field (
                                             "author_flair_text" )),
                                    };
                                let __field25 =
                                    match __field25 {
                                        Some(__field25) => __field25,
                                        None =>
                                        try!(visitor . missing_field (
                                             "created_utc" )),
                                    };
                                let __field26 =
                                    match __field26 {
                                        Some(__field26) => __field26,
                                        None =>
                                        try!(visitor . missing_field (
                                             "distinguished" )),
                                    };
                                let __field27 =
                                    match __field27 {
                                        Some(__field27) => __field27,
                                        None =>
                                        try!(visitor . missing_field (
                                             "num_reports" )),
                                    };
                                let __field28 =
                                    match __field28 {
                                        Some(__field28) => __field28,
                                        None =>
                                        try!(visitor . missing_field (
                                             "parent_id" )),
                                    };
                                Ok(Comment{subreddit_id: __field0,
                                           banned_by: __field1,
                                           removal_reason: __field2,
                                           link_id: __field3,
                                           likes: __field4,
                                           replies: __field5,
                                           saved: __field6,
                                           id: __field7,
                                           gilded: __field8,
                                           archived: __field9,
                                           author: __field10,
                                           score: __field11,
                                           approved_by: __field12,
                                           body: __field13,
                                           edited: __field14,
                                           author_flair_css_class: __field15,
                                           downs: __field16,
                                           ups: __field17,
                                           body_html: __field18,
                                           subreddit: __field19,
                                           name: __field20,
                                           score_hidden: __field21,
                                           stickied: __field22,
                                           created: __field23,
                                           author_flair_text: __field24,
                                           created_utc: __field25,
                                           distinguished: __field26,
                                           num_reports: __field27,
                                           parent_id: __field28,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["subreddit_id", "banned_by", "removal_reason",
                          "link_id", "likes", "replies", "saved", "id",
                          "gilded", "archived", "author", "score",
                          "approved_by", "body", "edited",
                          "author_flair_css_class", "downs", "ups",
                          "body_html", "subreddit", "name", "score_hidden",
                          "stickied", "created", "author_flair_text",
                          "created_utc", "distinguished", "num_reports",
                          "parent_id"];
                    deserializer.deserialize_struct("Comment", FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct More {
    pub count: u64,
    pub parent_id: String,
    pub children: Vec<String>,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_More: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for More {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<More, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field { __field0, __field1, __field2, __ignore, }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        2usize => { Ok(__Field::__field2) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "count" => { Ok(__Field::__field0) }
                                        "parent_id" => {
                                            Ok(__Field::__field1)
                                        }
                                        "children" => {
                                            Ok(__Field::__field2)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"count" => { Ok(__Field::__field0) }
                                        b"parent_id" => {
                                            Ok(__Field::__field1)
                                        }
                                        b"children" => {
                                            Ok(__Field::__field2)
                                        }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        More;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<More, __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: < u64 > (
                                               )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: < String > (
                                                )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                let __field2 =
                                    match try!(visitor . visit :: <
                                               Vec<String> > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(2usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(More{count: __field0,
                                        parent_id: __field1,
                                        children: __field2,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<More, __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<u64> = None;
                                let mut __field1: Option<String> = None;
                                let mut __field2: Option<Vec<String>> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("count"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: < u64
                                                          > (  )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("parent_id"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          String > (  )));
                                        }
                                        __Field::__field2 => {
                                            if __field2.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("children"));
                                            }
                                            __field2 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Vec<String> > (
                                                          )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field ( "count"
                                             )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field (
                                             "parent_id" )),
                                    };
                                let __field2 =
                                    match __field2 {
                                        Some(__field2) => __field2,
                                        None =>
                                        try!(visitor . missing_field (
                                             "children" )),
                                    };
                                Ok(More{count: __field0,
                                        parent_id: __field1,
                                        children: __field2,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["count", "parent_id", "children"];
                    deserializer.deserialize_struct("More", FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct MoreComments {
    pub json: MoreCommentsInner,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_MoreComments: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for MoreComments {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<MoreComments, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field { __field0, __ignore, }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "json" => { Ok(__Field::__field0) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"json" => { Ok(__Field::__field0) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        MoreComments;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<MoreComments, __V::Error>
                         where __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: <
                                               MoreCommentsInner > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(MoreComments{json: __field0,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         -> ::std::result::Result<MoreComments, __V::Error>
                         where __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<MoreCommentsInner> =
                                    None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("json"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          MoreCommentsInner >
                                                          (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field ( "json"
                                             )),
                                    };
                                Ok(MoreComments{json: __field0,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] = &["json"];
                    deserializer.deserialize_struct("MoreComments", FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
#[derive(Debug)]
pub struct MoreCommentsInner {
    pub errors: Vec<Value>,
    pub data: ThingList,
}
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _IMPL_DESERIALIZE_FOR_MoreCommentsInner: () =
    {
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::de::Deserialize for MoreCommentsInner {
            fn deserialize<__D>(deserializer: &mut __D)
             -> ::std::result::Result<MoreCommentsInner, __D::Error> where
             __D: _serde::de::Deserializer {
                {
                    #[allow(non_camel_case_types)]
                    enum __Field { __field0, __field1, __ignore, }
                    impl _serde::de::Deserialize for __Field {
                        #[inline]
                        fn deserialize<__D>(deserializer: &mut __D)
                         -> ::std::result::Result<__Field, __D::Error> where
                         __D: _serde::de::Deserializer {
                            struct __FieldVisitor<__D> {
                                phantom: ::std::marker::PhantomData<__D>,
                            }
                            impl <__D> _serde::de::Visitor for
                             __FieldVisitor<__D> where
                             __D: _serde::de::Deserializer {
                                type
                                Value
                                =
                                __Field;
                                fn visit_usize<__E>(&mut self, value: usize)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        0usize => { Ok(__Field::__field0) }
                                        1usize => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_str<__E>(&mut self, value: &str)
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        "errors" => { Ok(__Field::__field0) }
                                        "data" => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                                fn visit_bytes<__E>(&mut self, value: &[u8])
                                 -> ::std::result::Result<__Field, __E> where
                                 __E: _serde::de::Error {
                                    match value {
                                        b"errors" => { Ok(__Field::__field0) }
                                        b"data" => { Ok(__Field::__field1) }
                                        _ => Ok(__Field::__ignore),
                                    }
                                }
                            }
                            deserializer.deserialize_struct_field(__FieldVisitor::<__D>{phantom:
                                                                                            ::std::marker::PhantomData,})
                        }
                    }
                    struct __Visitor<__D: _serde::de::Deserializer>(::std::marker::PhantomData<__D>);
                    impl <__D: _serde::de::Deserializer> _serde::de::Visitor
                     for __Visitor<__D> {
                        type
                        Value
                        =
                        MoreCommentsInner;
                        #[inline]
                        fn visit_seq<__V>(&mut self, mut visitor: __V)
                         ->
                             ::std::result::Result<MoreCommentsInner,
                                                   __V::Error> where
                         __V: _serde::de::SeqVisitor {
                            {
                                let __field0 =
                                    match try!(visitor . visit :: < Vec<Value>
                                               > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(0usize));
                                        }
                                    };
                                let __field1 =
                                    match try!(visitor . visit :: < ThingList
                                               > (  )) {
                                        Some(value) => { value }
                                        None => {
                                            try!(visitor . end (  ));
                                            return Err(_serde::de::Error::invalid_length(1usize));
                                        }
                                    };
                                try!(visitor . end (  ));
                                Ok(MoreCommentsInner{errors: __field0,
                                                     data: __field1,})
                            }
                        }
                        #[inline]
                        fn visit_map<__V>(&mut self, mut visitor: __V)
                         ->
                             ::std::result::Result<MoreCommentsInner,
                                                   __V::Error> where
                         __V: _serde::de::MapVisitor {
                            {
                                let mut __field0: Option<Vec<Value>> = None;
                                let mut __field1: Option<ThingList> = None;
                                while let Some(key) =
                                          try!(visitor . visit_key :: <
                                               __Field > (  )) {
                                    match key {
                                        __Field::__field0 => {
                                            if __field0.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("errors"));
                                            }
                                            __field0 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          Vec<Value> > (  )));
                                        }
                                        __Field::__field1 => {
                                            if __field1.is_some() {
                                                return Err(<__V::Error as
                                                               _serde::de::Error>::duplicate_field("data"));
                                            }
                                            __field1 =
                                                Some(try!(visitor .
                                                          visit_value :: <
                                                          ThingList > (  )));
                                        }
                                        _ => {
                                            try!(visitor . visit_value :: <
                                                 _serde :: de :: impls ::
                                                 IgnoredAny > (  ));
                                        }
                                    }
                                }
                                try!(visitor . end (  ));
                                let __field0 =
                                    match __field0 {
                                        Some(__field0) => __field0,
                                        None =>
                                        try!(visitor . missing_field (
                                             "errors" )),
                                    };
                                let __field1 =
                                    match __field1 {
                                        Some(__field1) => __field1,
                                        None =>
                                        try!(visitor . missing_field ( "data"
                                             )),
                                    };
                                Ok(MoreCommentsInner{errors: __field0,
                                                     data: __field1,})
                            }
                        }
                    }
                    const FIELDS: &'static [&'static str] =
                        &["errors", "data"];
                    deserializer.deserialize_struct("MoreCommentsInner",
                                                    FIELDS,
                                                    __Visitor::<__D>(::std::marker::PhantomData))
                }
            }
        }
    };
